<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DoubleZ&#39;s blog</title>
  
  <subtitle>Just for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.djangoz.com/"/>
  <updated>2018-06-23T03:32:42.436Z</updated>
  <id>https://www.djangoz.com/</id>
  
  <author>
    <name>DoubleZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单例模式下多线程的同步问题</title>
    <link href="https://www.djangoz.com/2018/06/23/Singleton_sync/"/>
    <id>https://www.djangoz.com/2018/06/23/Singleton_sync/</id>
    <published>2018-06-22T16:00:00.000Z</published>
    <updated>2018-06-23T03:32:42.436Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看<a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">head first 设计模式</a>,学习了单例模式的使用，自己在实际编程中也经常使用这种设计模式。<br>在用swing练习编写贪吃蛇的小游戏的时候，打算将平时学习的东西运用到实际中去，发现了使用多线程很容易出错，对Java的多线程还是不熟悉啊。<br>贪吃蛇中玩家控制的蛇是唯一的，于是就把蛇这个类弄成了单例模式那样，然后再开一个线程控制蛇的移动。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Snake</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Snake snake;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Snake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Game()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snake <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(snake==<span class="keyword">null</span>)&#123;</span><br><span class="line">            snake = <span class="keyword">new</span> Snake();</span><br><span class="line">            System.out.println(<span class="string">"test"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> snake;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Snake snake = Snake.getInstance();</span><br><span class="line">        <span class="keyword">if</span>(snake.isrunning)</span><br><span class="line">            snake.update();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果运行后控制台输出了多个test<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Sing-1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>出现这个现象我想到了多线程中snake不同步的问题，在Game这个线程中snake还没有被实例化，于是也new了一个对象出来，就有了两个Snake的对象，从而引发了问题，在<a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">head first 设计模式</a>中说过，单例模式处理多线程的方法，利用双重检查加锁，首先检查是否实例已经创建了，如果尚未创建，“才”进行同步。这样一来，只有第一次会同步，减少使用同步，增加程序性能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Snake</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Snake snake;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snake <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(snake==<span class="keyword">null</span>)&#123;        <span class="comment">//检查实例，如果不存在，就进入同步区块。</span></span><br><span class="line">        <span class="comment">/*只有第一次才彻底执行这里的代码*/</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Snake.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(snake==<span class="keyword">null</span>) &#123;       <span class="comment">//进入区块后，再检查一次，如果仍是null，才创建实例</span></span><br><span class="line">                    snake = <span class="keyword">new</span> Snake();</span><br><span class="line">                    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> snake;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改后正常运行<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Sing-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看&lt;a href=&quot;https://book.douban.com/subject/2243615/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;head first 设计模式&lt;/a&gt;,学习了单例模式的使用，自己在实际编程中也经常使用这种设计模式。
      
    
    </summary>
    
      <category term="java" scheme="https://www.djangoz.com/categories/java/"/>
    
    
      <category term="设计模式" scheme="https://www.djangoz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>博客复活</title>
    <link href="https://www.djangoz.com/2018/06/11/blog_resurrection/"/>
    <id>https://www.djangoz.com/2018/06/11/blog_resurrection/</id>
    <published>2018-06-10T16:00:00.000Z</published>
    <updated>2018-06-11T05:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几周手痒把电脑装上hackintosh系统，在安装系统的时候本来以为一个盘分出几十G空间就可以了，结果要把整个盘都格式化才行，当时就直接把盘格式化了。<br>装好系统后，才想起整个博客项目都在那个盘上面，以前想到md文件也没有备份，整个博客源文件都不见了。<br>最近才有时间慢慢恢复博客，才发现文章写得也有十来篇了，恢复用html转md也挺麻烦的，现在明白了数据备份的重要性。<br>现在博客终于成功复活，贴张装好hackintosh成功的图片<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/hack.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几周手痒把电脑装上hackintosh系统，在安装系统的时候本来以为一个盘分出几十G空间就可以了，结果要把整个盘都格式化才行，当时就直接把盘格式化了。&lt;br&gt;装好系统后，才想起整个博客项目都在那个盘上面，以前想到md文件也没有备份，整个博客源文件都不见了。
      
    
    </summary>
    
    
      <category term="闲言碎语" scheme="https://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>python实用小工具</title>
    <link href="https://www.djangoz.com/2018/04/19/useful_in-python/"/>
    <id>https://www.djangoz.com/2018/04/19/useful_in-python/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2018-06-10T14:10:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简单下载服务器"><a href="#1-简单下载服务器" class="headerlink" title="1. 简单下载服务器"></a>1. 简单下载服务器</h2><p> 在需要下载的路径中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#python2</span><br><span class="line">python -m SimpleHTTPServer</span><br><span class="line"></span><br><span class="line">#python3</span><br><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>此进程会在端口8000监听，访问IP:8000即可浏览到当前目录的文件:<br> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/useful-py.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br> 点击文件即可进行下载。<br> 也可直接对文件进行wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget &lt;your ip address&gt;:/8000/filename</span><br></pre></td></tr></table></figure><h2 id="2-JSON解析小工具"><a href="#2-JSON解析小工具" class="headerlink" title="2. JSON解析小工具"></a>2. JSON解析小工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># echo &apos;&#123;&quot;age&quot;:10, &quot;name&quot;:&quot;name1&quot;&#125;&apos; | python -m json.tool</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;age&quot;: 10,</span><br><span class="line">    &quot;name&quot;: &quot;name1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-非交互式导入包"><a href="#3-非交互式导入包" class="headerlink" title="3. 非交互式导入包"></a>3. 非交互式导入包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import flask&quot;</span><br></pre></td></tr></table></figure><h2 id="4-pip-常用操作"><a href="#4-pip-常用操作" class="headerlink" title="4. pip 常用操作"></a>4. pip 常用操作</h2><p>1) 安装pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-pip</span><br></pre></td></tr></table></figure><p>2)  查找包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search flask</span><br></pre></td></tr></table></figure><p>​3) 安装指定版本包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask==0.8</span><br></pre></td></tr></table></figure><p>​4) 删除包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall flask</span><br></pre></td></tr></table></figure><p>​5) 查看包信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show flask</span><br></pre></td></tr></table></figure><p>​6) 检查包依赖是否完整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip check flask</span><br></pre></td></tr></table></figure><p>​7) 查看已安装包列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p>​8) 导出所有已安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>​9) 安装导出的所有包，可用于在其他服务器安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>​10) pip命令补全，tab键可补全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip completion –bash &gt;&gt; ~/.profile</span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><h2 id="5-加速pip安装"><a href="#5-加速pip安装" class="headerlink" title="5. 加速pip安装"></a>5. 加速pip安装</h2><p> pip<br>默认源地址pypi.python.org可能不稳定，可以用国内的阿里云源或者豆瓣的源代替，以豆瓣为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> flask</span><br></pre></td></tr></table></figure><p>每次都这样修改比较麻烦，可以直接修改pip的配置文件将源加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.pip</span><br><span class="line">cd ~/.pip</span><br><span class="line">vim pip.conf</span><br></pre></td></tr></table></figure><p>加入如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini。内容同上。</p><h2 id="6-ipython"><a href="#6-ipython" class="headerlink" title="6. ipython"></a>6. ipython</h2><p> 增强型的python交互式工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install ipython</span><br><span class="line">ipython</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简单下载服务器&quot;&gt;&lt;a href=&quot;#1-简单下载服务器&quot; class=&quot;headerlink&quot; title=&quot;1. 简单下载服务器&quot;&gt;&lt;/a&gt;1. 简单下载服务器&lt;/h2&gt;&lt;p&gt; 在需要下载的路径中执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="python" scheme="https://www.djangoz.com/categories/python/"/>
    
    
      <category term="小程序" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu上通过nginx+gunicorn+https部署Flask应用接入微信公众号</title>
    <link href="https://www.djangoz.com/2018/03/10/flask_app/"/>
    <id>https://www.djangoz.com/2018/03/10/flask_app/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2018-06-10T14:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然想开发一个微信公众号，就算没人关注也可以平时自己拿来使用，于是想到了用Flask做公众号的后端，用nginx来反向代理，并启用SSL/TLS。<br>下面分节介绍搭建过程。</p><h2 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h2><p>自己平时用的python3，于是就用python3来搭的，ubuntu默认安装了python3，首先安装包管理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>然后安装virtualenv与其他库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line">mkdir flask_app</span><br><span class="line">cd flask_app</span><br><span class="line">virtualenv env</span><br><span class="line">source env/bin/activate</span><br></pre></td></tr></table></figure></p><p>创建requirements.txt文件<br>如果想让Gunicorn支持异步 workers 的话需要安装一下三个python包(greenlet,eventlet,gevent),在清单文件中已给出，gunicorn还需要库函数 libevent(1.4.x or 2.0.4)<br>下面是Flask常用的库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Flask==<span class="number">0.10</span><span class="number">.1</span></span><br><span class="line">Flask-Login==<span class="number">0.2</span><span class="number">.11</span></span><br><span class="line">Flask-Mail==<span class="number">0.9</span><span class="number">.1</span></span><br><span class="line">Flask-Moment==<span class="number">0.4</span><span class="number">.0</span></span><br><span class="line">Flask-PageDown==<span class="number">0.1</span><span class="number">.5</span></span><br><span class="line">Flask-SQLAlchemy==<span class="number">2.0</span></span><br><span class="line">Flask-Script==<span class="number">2.0</span><span class="number">.5</span></span><br><span class="line">Flask-WTF==<span class="number">0.10</span><span class="number">.2</span></span><br><span class="line">Flask-Cache==<span class="number">0.13</span><span class="number">.1</span></span><br><span class="line">Flask-Restless==<span class="number">0.15</span><span class="number">.0</span></span><br><span class="line">Flask-Uploads==<span class="number">0.1</span><span class="number">.3</span></span><br><span class="line">Jinja2==<span class="number">2.7</span><span class="number">.3</span></span><br><span class="line">Mako==<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">Markdown==<span class="number">2.5</span><span class="number">.1</span></span><br><span class="line">MarkupSafe==<span class="number">0.23</span></span><br><span class="line">SQLAlchemy==<span class="number">0.9</span><span class="number">.8</span></span><br><span class="line">WTForms==<span class="number">2.0</span><span class="number">.1</span></span><br><span class="line">Werkzeug==<span class="number">0.9</span><span class="number">.6</span></span><br><span class="line">html5lib==<span class="number">1.0</span>b3</span><br><span class="line">itsdangerous==<span class="number">0.24</span></span><br><span class="line">six==<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">awesome-slugify==<span class="number">1.6</span></span><br><span class="line">gevent==<span class="number">1.2</span><span class="number">.2</span></span><br><span class="line">eventlet==<span class="number">0.22</span><span class="number">.1</span></span><br><span class="line">greenlet==<span class="number">0.4</span><span class="number">.13</span></span><br><span class="line">gunicorn==<span class="number">19.7</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p><p>这么多要安装的库，一个一个得装非常麻烦，运行</p><blockquote><p>(env) root@ubunt:~/flask_app# pip install -r requirements.txt</p></blockquote><p>即可全部安装完成</p><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><p>接下来就是上传 Flask的项目文件，这里先使用最简单的Flask应用</p><blockquote><p>(env) root@ubunt:~/flask_app# vim run.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>,port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>然后运行gunicorn<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(env) root@ubunt:~/flask_app# gunicorn -w 4 -b 127.0.1:5000 run:app</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19339] [INFO] Starting gunicorn 19.7.0</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19339] [INFO] Listening at: http://127.0.0.1:5000 (19339)</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19339] [INFO] Using worker: sync</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19342] [INFO] Booting worker with pid: 19342</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19343] [INFO] Booting worker with pid: 19343</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19344] [INFO] Booting worker with pid: 19344</span><br><span class="line">[2018-03-11 03:24:02 +0000] [19345] [INFO] Booting worker with pid: 19345</span><br></pre></td></tr></table></figure></p><h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><p>安装nginx</p><blockquote><p>(env) root@ubunt:~/flask_app# apt install nginx</p></blockquote><p>修改nginx配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(env) root@ubunt:~/flask_app# vim /etc/nginx/sites-available/default </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass        http://localhost:5000;</span><br><span class="line">                proxy_set_header   Host $host;</span><br><span class="line">                proxy_set_header   X-Real-IP  $remote_addr;</span><br><span class="line">                proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_redirect default;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改配置文件后，重启nginx服务</p><blockquote><p>(env) root@ubunt:~/flask_app# /etc/init.d/nginx restart</p></blockquote><p>此时打开浏览器，输入http://你的服务器ip就可以看到运行结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/flask_app_1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>现在基本配置就已经弄好了</p><h2 id="开启SSL"><a href="#开启SSL" class="headerlink" title="开启SSL"></a>开启SSL</h2><p>nginx下配置ssl是很简单的，无论是去认证中心买SSL安全证书还是自签署证书,我自己是用的cloudflare的免费SSL证书,在cloudflare上的操作就不介绍了，在cloudflare上申请证书后会有一个公钥和密钥，把这两个保存到本地，接下来就直接介绍配置SSL<br>我自己的证书是放在/etc/ssl/private/目录里面的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 443 ssl default_server;</span><br><span class="line">listen [::]:443 ssl default_server;</span><br><span class="line">server_name ***; #你的域名;</span><br><span class="line"></span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate /etc/ssl/private/***.crt; #公钥地址</span><br><span class="line">ssl_certificate_key /etc/ssl/private/***.key;   #私钥地址</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass        http://localhost:5000;</span><br><span class="line">        proxy_set_header   Host $host;</span><br><span class="line">        proxy_set_header   X-Real-IP  $remote_addr;</span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_redirect default;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件后，重启nginx服务</p><blockquote><p>(env) root@ubunt:~/flask_app# /etc/init.d/nginx restart</p></blockquote><h2 id="flask接入微信公众号"><a href="#flask接入微信公众号" class="headerlink" title="flask接入微信公众号"></a>flask接入微信公众号</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/flask_app_2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先，需要写  flask 后台代码，以下以一个简单的后台做为示范。</p><blockquote><p>(env) root@ubunt:~/flask_app# vim run.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g,request,make_response</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wechat_auth</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        token=<span class="string">'Your token'</span> <span class="comment">#微信配置所需的token</span></span><br><span class="line">        data = request.args</span><br><span class="line">        signature = data.get(<span class="string">'signature'</span>,<span class="string">''</span>)</span><br><span class="line">        timestamp = data.get(<span class="string">'timestamp'</span>,<span class="string">''</span>)</span><br><span class="line">        nonce = data.get(<span class="string">'nonce'</span>,<span class="string">''</span>)</span><br><span class="line">        echostr = data.get(<span class="string">'echostr'</span>,<span class="string">''</span>)</span><br><span class="line">        s = [timestamp,nonce,token]</span><br><span class="line">        s.sort()</span><br><span class="line">        s = <span class="string">''</span>.join(s)</span><br><span class="line">        <span class="keyword">return</span> make_response(echostr)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rec = request.stream.read()</span><br><span class="line">        xml_rec = ET.fromstring(rec)</span><br><span class="line">        tou = xml_rec.find(<span class="string">'ToUserName'</span>).text</span><br><span class="line">        fromu = xml_rec.find(<span class="string">'FromUserName'</span>).text</span><br><span class="line">        content = xml_rec.find(<span class="string">'Content'</span>).text</span><br><span class="line">        xml_rep = <span class="string">"&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;&lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;&lt;CreateTime&gt;%s&lt;/CreateTime&gt;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;&lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;&lt;FuncFlag&gt;0&lt;/FuncFlag&gt;&lt;/xml&gt;"</span></span><br><span class="line">        response = make_response(xml_rep % (fromu,tou,str(int(time.time())), content))</span><br><span class="line">        response.content_type=<span class="string">'application/xml'</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello weixin!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>然后运行gunicorn</p><blockquote><p>(env) root@ubunt:~/flask_app# gunicorn -w 4 -b 127.0.1:5000 run:app</p></blockquote><p><strong>注：</strong> 其中的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = make_response(xml_rep % (fromu,tou,str(int(time.time())), content))<span class="comment"># 是将xml_rep 的值按顺序返回给微信</span></span><br></pre></td></tr></table></figure></p><p>这个是返回值。所以如果要做什么微信自动回复就将内容添到content中，然后微信前端就会回复给用户。<br><strong>注：</strong> 如果要消息加解密方式设为安全模式的话，参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1434696670" target="_blank" rel="noopener">官方文档</a><br>部署完获得后台网址就可以进行下一步：开始填写微信接口。其他的都随意填，关键的两个值是下图的箭头所指。</p><p>填好后会出现配置成功的标志。 这时就能在微信上使用这个公众号了。  本文所实现的功能是你向公众号发布一条信息，公众号返回同样的信息给你。</p><p>微信上最后结果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/flask_app_3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>参考链接：</p><p><a href="https://www.techbelife.com/post/Deploy-the-Flask-application-with-uWSGI-and-Nginx.html" target="_blank" rel="noopener">在Centos使用Nginx，uWSGI部署Flask应用</a></p><p><a href="https://zhuanlan.zhihu.com/p/21262280" target="_blank" rel="noopener">centos下通过gunicorn+nginx+supervisor部署Flask项目</a></p><p><a href="http://seanlook.com/2015/05/28/nginx-ssl/" target="_blank" rel="noopener">nginx配置ssl加密</a></p><p><a href="https://www.cnblogs.com/Ray-liang/p/4173923.html" target="_blank" rel="noopener">阿里云部署 Flask + WSGI + Nginx 详解</a></p><p><a href="http://www.cnblogs.com/ArtsCrafts/p/gunicorn.html" target="_blank" rel="noopener">Gunicorn快速入门</a></p><p><a href="http://blog.csdn.net/qq_34963461/article/details/52984311" target="_blank" rel="noopener">微信公众号开发 flask后台的快速部署</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然想开发一个微信公众号，就算没人关注也可以平时自己拿来使用，于是想到了用Flask做公众号的后端，用nginx来反向代理，并启用SSL/TLS。&lt;br&gt;下面分节介绍搭建过程。&lt;/p&gt;
&lt;h2 id=&quot;安装python环境&quot;&gt;&lt;a href=&quot;#安装python环境&quot; cl
      
    
    </summary>
    
      <category term="python" scheme="https://www.djangoz.com/categories/python/"/>
    
    
      <category term="应用" scheme="https://www.djangoz.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>ADB 用法大全</title>
    <link href="https://www.djangoz.com/2018/02/02/awesome_adb/"/>
    <id>https://www.djangoz.com/2018/02/02/awesome_adb/</id>
    <published>2018-02-01T16:00:00.000Z</published>
    <updated>2018-06-11T04:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注：</strong> 本篇文章为GitHub转载过来，<a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="noopener">原地址</a></p><p>ADB，即 <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">Android Debug Bridge</a>，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。</p><p>持续更新中，欢迎提 PR 和 Issue 补充指正，觉得有用的可以将 <a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="noopener">此 GitHub 仓库</a> Star 收藏备用。</p><p><strong>注：</strong> 有部分命令的支持情况可能与 Android 系统版本及定制 ROM 的实现有关。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p>adb 命令的基本语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb [-d|-e|-s &lt;serialNumber&gt;] &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p>如果只有一个设备/模拟器连接时，可以省略掉 <code>[-d|-e|-s &lt;serialNumber&gt;]</code> 这一部分，直接使用 <code>adb &lt;command&gt;</code>。</p><h3 id="为命令指定目标设备"><a href="#为命令指定目标设备" class="headerlink" title="为命令指定目标设备"></a>为命令指定目标设备</h3><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td>-e</td><td>指定当前唯一运行的模拟器为命令目标</td></tr><tr><td><code>-s &lt;serialNumber&gt;</code></td><td>指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><p>在多个设备/模拟器连接的情况下较常用的是 <code>-s &lt;serialNumber&gt;</code> 参数，serialNumber 可以通过 <code>adb devices</code> 命令获取。如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line"></span><br><span class="line">List of devices attached</span><br><span class="line">cf264b8fdevice</span><br><span class="line">emulator-5554device</span><br><span class="line">10.129.164.6:5555device</span><br></pre></td></tr></table></figure><p>输出里的 <code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 即为 serialNumber。</p><p>比如这时想指定 <code>cf264b8f</code> 这个设备来运行 adb 命令获取屏幕分辨率：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s cf264b8f shell wm size</span><br></pre></td></tr></table></figure><p>又如想给 <code>10.129.164.6:5555</code> 这个设备安装应用（<em>这种形式的 serialNumber 格式为 <code>&lt;IP&gt;:&lt;Port&gt;</code>，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器</em>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 10.129.164.6:5555 install test.apk</span><br></pre></td></tr></table></figure><p><strong>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</strong></p><h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动 adb server 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure><p>（一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。）</p><p>停止 adb server 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">kill</span>-server</span><br></pre></td></tr></table></figure><h3 id="查看-adb-版本"><a href="#查看-adb-版本" class="headerlink" title="查看 adb 版本"></a>查看 adb 版本</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb version</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android Debug Bridge version 1.0.36</span><br><span class="line">Revision 8f855a3d9b35-android</span><br></pre></td></tr></table></figure><h3 id="以-root-权限运行-adbd"><a href="#以-root-权限运行-adbd" class="headerlink" title="以 root 权限运行 adbd"></a>以 root 权限运行 adbd</h3><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p><p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 <code>adb xxx</code> 执行。这时可以 <code>adb shell</code> 然后 <code>su</code> 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restarting adbd as root</span><br></pre></td></tr></table></figure><p>现在再运行 <code>adb shell</code>，看看命令行提示符是不是变成 <code>#</code> 了？</p><p>有些手机 root 后也无法通过 <code>adb root</code> 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 <code>adbd cannot run as root in production builds</code>，此时可以先安装 adbd Insecure，然后 <code>adb root</code> 试试。</p><p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 <code>adb unroot</code> 命令。</p><h3 id="指定-adb-server-的网络端口"><a href="#指定-adb-server-的网络端口" class="headerlink" title="指定 adb server 的网络端口"></a>指定 adb server 的网络端口</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -P &lt;port&gt; start-server</span><br></pre></td></tr></table></figure><p>默认端口为 5037。</p><h2 id="设备连接管理"><a href="#设备连接管理" class="headerlink" title="设备连接管理"></a>设备连接管理</h2><h3 id="查询已连接设备-模拟器"><a href="#查询已连接设备-模拟器" class="headerlink" title="查询已连接设备/模拟器"></a>查询已连接设备/模拟器</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">cf264b8fdevice</span><br><span class="line">emulator-5554device</span><br><span class="line">10.129.164.6:5555device</span><br></pre></td></tr></table></figure><p>输出格式为 <code>[serialNumber] [state]</code>，serialNumber 即我们常说的 SN，state 有如下几种：</p><ul><li><p><code>offline</code> —— 表示设备未连接成功或无响应。</p></li><li><p><code>device</code> —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。</p></li><li><p><code>no device</code> —— 没有设备/模拟器连接。</p></li></ul><p>以上输出显示当前已经连接了三台设备/模拟器，<code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 分别是它们的 SN。从 <code>emulator-5554</code> 这个名字可以看出它是一个 Android 模拟器，而 <code>10.129.164.6:5555</code> 这种形为 <code>&lt;IP&gt;:&lt;Port&gt;</code> 的 serialNumber 一般是无线连接的设备或 Genymotion 等第三方 Android 模拟器。</p><p>常见异常输出：</p><ol><li><p>没有设备/模拟器连接成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br></pre></td></tr></table></figure></li><li><p>设备/模拟器未连接到 adb 或无响应。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">cf264b8foffline</span><br></pre></td></tr></table></figure></li></ol><h3 id="USB-连接"><a href="#USB-连接" class="headerlink" title="USB 连接"></a>USB 连接</h3><p>通过 USB 连接来正常使用 adb 需要保证几点：</p><ol><li><p>硬件状态正常。</p><p>包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。</p></li><li><p>Android 设备的开发者选项和 USB 调试模式已开启。</p><p>可以到「设置」-「开发者选项」-「Android 调试」查看。</p><p>如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。</p></li><li><p>设备驱动状态正常。</p><p>这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。</p></li><li><p>通过 USB 线连接好电脑和设备后确认状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>如果能看到</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx device</span><br></pre></td></tr></table></figure><p>说明连接成功。</p></li></ol><h3 id="无线连接（需要借助-USB-线）"><a href="#无线连接（需要借助-USB-线）" class="headerlink" title="无线连接（需要借助 USB 线）"></a>无线连接（需要借助 USB 线）</h3><p>除了可以通过 USB 连接设备与电脑来使用 adb，也可以通过无线连接——虽然连接过程中也有需要使用 USB 的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱 USB 连接线的限制啦！</p><p>操作步骤：</p><ol><li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p></li><li><p>将设备与电脑通过 USB 线连接。</p><p>应确保连接成功（可运行 <code>adb devices</code> 看是否能列出该设备）。</p></li><li><p>让设备在 5555 端口监听 TCP/IP 连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure></li><li><p>断开 USB 连接。</p></li><li><p>找到设备的 IP 地址。</p><p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 [查看设备信息 - IP 地址][1] 一节里的方法用 adb 命令来查看。</p></li><li><p>通过 IP 地址连接设备。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;device-ip-address&gt;</span><br></pre></td></tr></table></figure><p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p></li><li><p>确认连接状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>如果能看到</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;device-ip-address&gt;:5555 device</span><br></pre></td></tr></table></figure><p>说明连接成功。</p></li></ol><p>如果连接不了，请确认 Android 设备与电脑是连接到了同一个 WiFi，然后再次执行 <code>adb connect &lt;device-ip-address&gt;</code> 那一步；</p><p>如果还是不行的话，通过 <code>adb kill-server</code> 重新启动 adb 然后从头再来一次试试。</p><p><strong>断开无线连接</strong></p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb disconnect &lt;device-ip-address&gt;</span><br></pre></td></tr></table></figure><h3 id="无线连接（无需借助-USB-线）"><a href="#无线连接（无需借助-USB-线）" class="headerlink" title="无线连接（无需借助 USB 线）"></a>无线连接（无需借助 USB 线）</h3><p><strong>注：需要 root 权限。</strong></p><p>上一节「无线连接（需要借助 USB 线）」是官方文档里介绍的方法，需要借助于 USB 数据线来实现无线连接。</p><p>既然我们想要实现无线连接，那能不能所有步骤下来都是无线的呢？答案是能的。</p><ol><li><p>在 Android 设备上安装一个终端模拟器。</p><p>已经安装过的设备可以跳过此步。我使用的终端模拟器下载地址是：<a href="https://jackpal.github.io/Android-Terminal-Emulator/" target="_blank" rel="noopener">Terminal Emulator for Android Downloads</a></p></li><li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p></li><li><p>打开 Android 设备上的终端模拟器，在里面依次运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">setprop service.adb.tcp.port 5555</span><br></pre></td></tr></table></figure></li><li><p>找到 Android 设备的 IP 地址。</p><p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 [查看设备信息 - IP 地址][1] 一节里的方法用 adb 命令来查看。</p></li><li><p>在电脑上通过 adb 和 IP 地址连接 Android 设备。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;device-ip-address&gt;</span><br></pre></td></tr></table></figure><p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p><p>如果能看到 <code>connected to &lt;device-ip-address&gt;:5555</code> 这样的输出则表示连接成功。</p></li></ol><p><em>节注一：</em></p><p>有的设备，比如小米 5S + MIUI 8.0 + Android 6.0.1 MXB48T，可能在第 5 步之前需要重启 adbd 服务，在设备的终端模拟器上运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restart adbd</span><br></pre></td></tr></table></figure><p>如果 restart 无效，尝试以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop adbd</span><br><span class="line">start adbd</span><br></pre></td></tr></table></figure><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><p>查看应用列表的基本命令格式是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]</span><br></pre></td></tr></table></figure><p>即在 <code>adb shell pm list packages</code> 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：</p><table><thead><tr><th>参数</th><th>显示列表</th></tr></thead><tbody><tr><td>无</td><td>所有应用</td></tr><tr><td>-f</td><td>显示应用关联的 apk 文件</td></tr><tr><td>-d</td><td>只显示 disabled 的应用</td></tr><tr><td>-e</td><td>只显示 enabled 的应用</td></tr><tr><td>-s</td><td>只显示系统应用</td></tr><tr><td>-3</td><td>只显示第三方应用</td></tr><tr><td>-i</td><td>显示应用的 installer</td></tr><tr><td>-u</td><td>包含已卸载应用</td></tr><tr><td><code>&lt;FILTER&gt;</code></td><td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td></tr></tbody></table><h4 id="所有应用"><a href="#所有应用" class="headerlink" title="所有应用"></a>所有应用</h4><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package:com.android.smoketest</span><br><span class="line">package:com.example.android.livecubes</span><br><span class="line">package:com.android.providers.telephony</span><br><span class="line">package:com.google.android.googlequicksearchbox</span><br><span class="line">package:com.android.providers.calendar</span><br><span class="line">package:com.android.providers.media</span><br><span class="line">package:com.android.protips</span><br><span class="line">package:com.android.documentsui</span><br><span class="line">package:com.android.gallery</span><br><span class="line">package:com.android.externalstorage</span><br><span class="line">...</span><br><span class="line">// other packages here</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="系统应用"><a href="#系统应用" class="headerlink" title="系统应用"></a>系统应用</h4><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages -s</span><br></pre></td></tr></table></figure><h4 id="第三方应用"><a href="#第三方应用" class="headerlink" title="第三方应用"></a>第三方应用</h4><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages -3</span><br></pre></td></tr></table></figure><h4 id="包名包含某字符串的应用"><a href="#包名包含某字符串的应用" class="headerlink" title="包名包含某字符串的应用"></a>包名包含某字符串的应用</h4><p>比如要查看包名包含字符串 <code>mazhuang</code> 的应用列表，命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages mazhuang</span><br></pre></td></tr></table></figure><p>当然也可以使用 grep 来过滤：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages | grep mazhuang</span><br></pre></td></tr></table></figure><h3 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h3><p>命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install [-lrtsdg] &lt;path_to_apk&gt;</span><br></pre></td></tr></table></figure><p>参数：</p><p><code>adb install</code> 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr></tbody></table><p>运行命令后如果见到类似如下输出（状态为 <code>Success</code>）代表安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[100%] /data/<span class="built_in">local</span>/tmp/1.apk</span><br><span class="line">pkg: /data/<span class="built_in">local</span>/tmp/1.apk</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>上面是当前最新版 v1.0.36 的 adb 的输出，会显示 push apk 文件到手机的进度百分比。</p><p>使用旧版本 adb 的输出则是这样的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12040 KB/s (22205609 bytes <span class="keyword">in</span> 1.801s)</span><br><span class="line">        pkg: /data/<span class="built_in">local</span>/tmp/SogouInput_android_v8.3_sweb.apk</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>而如果状态为 <code>Failure</code> 则表示安装失败，比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[100%] /data/<span class="built_in">local</span>/tmp/map-20160831.apk</span><br><span class="line">        pkg: /data/<span class="built_in">local</span>/tmp/map-20160831.apk</span><br><span class="line">Failure [INSTALL_FAILED_ALREADY_EXISTS]</span><br></pre></td></tr></table></figure><p>常见安装失败输出代码、含义及可能的解决办法如下：</p><table><thead><tr><th>输出</th><th>含义</th><th>解决办法</th></tr></thead><tbody><tr><td>INSTALL_FAILED_ALREADY_EXISTS</td><td>应用已经存在，或卸载了但没卸载干净</td><td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td></tr><tr><td>INSTALL_FAILED_INVALID_APK</td><td>无效的 APK 文件</td><td></td></tr><tr><td>INSTALL_FAILED_INVALID_URI</td><td>无效的 APK 文件名</td><td>确保 APK 文件名里无中文</td></tr><tr><td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td><td>空间不足</td><td>清理空间</td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PACKAGE</td><td>已经存在同名程序</td><td></td></tr><tr><td>INSTALL_FAILED_NO_SHARED_USER</td><td>请求的共享用户不存在</td><td></td></tr><tr><td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td><td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td><td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td></tr><tr><td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td><td>请求的共享用户存在但签名不一致</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td><td>安装包使用了设备上不可用的共享库</td><td></td></tr><tr><td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td><td>替换时无法删除</td><td></td></tr><tr><td>INSTALL_FAILED_DEXOPT</td><td>dex 优化验证失败或空间不足</td><td></td></tr><tr><td>INSTALL_FAILED_OLDER_SDK</td><td>设备系统版本低于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_CONFLICTING_PROVIDER</td><td>设备里已经存在与应用里同名的 content provider</td><td></td></tr><tr><td>INSTALL_FAILED_NEWER_SDK</td><td>设备系统版本高于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_TEST_ONLY</td><td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td><td></td></tr><tr><td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td><td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_FEATURE</td><td>应用使用了设备不可用的功能</td><td></td></tr><tr><td>INSTALL_FAILED_CONTAINER_ERROR</td><td>1. sdcard 访问失败;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 确认 sdcard 可用，或者安装到内置存储;<br>2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_INVALID_INSTALL_LOCATION</td><td>1. 不能安装到指定位置;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 切换安装位置，添加或删除 <code>-s</code> 参数;<br>2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_MEDIA_UNAVAILABLE</td><td>安装位置不可用</td><td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td></tr><tr><td>INSTALL_FAILED_VERIFICATION_TIMEOUT</td><td>验证安装包超时</td><td></td></tr><tr><td>INSTALL_FAILED_VERIFICATION_FAILURE</td><td>验证安装包失败</td><td></td></tr><tr><td>INSTALL_FAILED_PACKAGE_CHANGED</td><td>应用与调用程序期望的不一致</td><td></td></tr><tr><td>INSTALL_FAILED_UID_CHANGED</td><td>以前安装过该应用，与本次分配的 UID 不一致</td><td>清除以前安装过的残留文件</td></tr><tr><td>INSTALL_FAILED_VERSION_DOWNGRADE</td><td>已经安装了该应用更高版本</td><td>使用 <code>-d</code> 参数</td></tr><tr><td>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td><td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NOT_APK</td><td>指定路径不是文件，或不是以 <code>.apk</code> 结尾</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_MANIFEST</td><td>无法解析的 AndroidManifest.xml 文件</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td><td>解析器遇到异常</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NO_CERTIFICATES</td><td>安装包没有签名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td><td>已安装该应用，且签名与 APK 文件不一致</td><td>先卸载设备上的该应用，再安装</td></tr><tr><td>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td><td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td><td>manifest 文件里没有或者使用了无效的包名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td><td>manifest 文件里指定了无效的共享用户 ID</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td><td>解析 manifest 文件时遇到结构性错误</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td><td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td><td></td></tr><tr><td>INSTALL_FAILED_INTERNAL_ERROR</td><td>因系统问题安装失败</td><td></td></tr><tr><td>INSTALL_FAILED_USER_RESTRICTED</td><td>用户被限制安装应用</td><td></td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PERMISSION</td><td>应用尝试定义一个已经存在的权限名称</td><td></td></tr><tr><td>INSTALL_FAILED_NO_MATCHING_ABIS</td><td>应用包含设备的应用程序二进制接口不支持的 native code</td><td></td></tr><tr><td>INSTALL_CANCELED_BY_USER</td><td>应用安装需要在设备上确认，但未操作设备或点了取消</td><td>在设备上同意安装</td></tr><tr><td>INSTALL_FAILED_ACWF_INCOMPATIBLE</td><td>应用程序与设备不兼容</td><td></td></tr><tr><td>INSTALL_FAILED_TEST_ONLY</td><td>APK 文件是使用 Android Studio 直接 RUN 编译出来的文件</td><td>通过 Gradle 的 assembleDebug 或 assembleRelease 重新编译，或者 Generate Signed APK</td></tr><tr><td>does not contain AndroidManifest.xml</td><td>无效的 APK 文件</td><td></td></tr><tr><td>is not a valid zip file</td><td>无效的 APK 文件</td><td></td></tr><tr><td>Offline</td><td>设备未连接成功</td><td>先将设备与 adb 连接成功</td></tr><tr><td>unauthorized</td><td>设备未授权允许调试</td><td></td></tr><tr><td>error: device not found</td><td>没有连接成功的设备</td><td>先将设备与 adb 连接成功</td></tr><tr><td>protocol failure</td><td>设备已断开连接</td><td>先将设备与 adb 连接成功</td></tr><tr><td>Unknown option: -s</td><td>Android 2.2 以下不支持安装到 sdcard</td><td>不使用 <code>-s</code> 参数</td></tr><tr><td>No space left on device</td><td>空间不足</td><td>清理空间</td></tr><tr><td>Permission denied … sdcard …</td><td>sdcard 不可用</td><td></td></tr><tr><td>signatures do not match the previously installed version; ignoring!</td><td>已安装该应用且签名不一致</td><td>先卸载设备上的该应用，再安装</td></tr></tbody></table><p>参考：<a href="https://github.com/android/platform_frameworks_base/blob/master/core%2Fjava%2Fandroid%2Fcontent%2Fpm%2FPackageManager.java" target="_blank" rel="noopener">PackageManager.java</a></p><p><em><code>adb install</code> 内部原理简介</em></p><p><code>adb install</code> 实际是分三步完成：</p><ol><li><p>push apk 文件到 /data/local/tmp。</p></li><li><p>调用 pm install 安装。</p></li><li><p>删除 /data/local/tmp 下的对应 apk 文件。</p></li></ol><p>所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</p><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall [-k] &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;packagename&gt;</code> 表示应用的包名，<code>-k</code> 参数可选，表示卸载应用但保留数据和缓存目录。</p><p>命令示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall com.qihoo360.mobilesafe</span><br></pre></td></tr></table></figure><p>表示卸载 360 手机卫士。</p><h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;packagename&gt;</code> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p><p>命令示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear com.qihoo360.mobilesafe</span><br></pre></td></tr></table></figure><p>表示清除 360 手机卫士的数据和缓存。</p><h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mFocusedActivity</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mFocusedActivity: ActivityRecord&#123;8079d7e u0 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher t42&#125;</span><br></pre></td></tr></table></figure><p>其中的 <code>com.cyanogenmod.trebuchet/com.android.launcher3.Launcher</code> 就是当前处于前台的 Activity。</p><h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity services [&lt;packagename&gt;]</span><br></pre></td></tr></table></figure><p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。</p><p><code>&lt;packagename&gt;</code> 不一定要给出完整的包名，比如运行 <code>adb shell dumpsys activity services org.mazhuang</code>，那么包名 <code>org.mazhuang.demo1</code>、<code>org.mazhuang.demo2</code> 和 <code>org.mazhuang123</code> 等相关的 Services 都会列出来。</p><h3 id="查看应用详细信息"><a href="#查看应用详细信息" class="headerlink" title="查看应用详细信息"></a>查看应用详细信息</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p>输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。</p><p><code>&lt;packagename&gt;</code> 表示应用包名。</p><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Activity Resolver Table:</span><br><span class="line">  Non-Data Actions:</span><br><span class="line">      android.intent.action.MAIN:</span><br><span class="line">        5b4cba8 org.mazhuang.guanggoo/.SplashActivity filter 5ec9dcc</span><br><span class="line">          Action: <span class="string">"android.intent.action.MAIN"</span></span><br><span class="line">          Category: <span class="string">"android.intent.category.LAUNCHER"</span></span><br><span class="line">          AutoVerify=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Registered ContentProviders:</span><br><span class="line">  org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider:</span><br><span class="line">    Provider&#123;7a3c394 org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider&#125;</span><br><span class="line"></span><br><span class="line">ContentProvider Authorities:</span><br><span class="line">  [org.mazhuang.guanggoo.fileProvider]:</span><br><span class="line">    Provider&#123;7a3c394 org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;7754242 org.mazhuang.guanggoo&#125;</span><br><span class="line"></span><br><span class="line">Key Set Manager:</span><br><span class="line">  [org.mazhuang.guanggoo]</span><br><span class="line">      Signing KeySets: 501</span><br><span class="line"></span><br><span class="line">Packages:</span><br><span class="line">  Package [org.mazhuang.guanggoo] (c1d7f):</span><br><span class="line">    userId=10394</span><br><span class="line">    pkg=Package&#123;55f714c org.mazhuang.guanggoo&#125;</span><br><span class="line">    codePath=/data/app/org.mazhuang.guanggoo-2</span><br><span class="line">    resourcePath=/data/app/org.mazhuang.guanggoo-2</span><br><span class="line">    legacyNativeLibraryDir=/data/app/org.mazhuang.guanggoo-2/lib</span><br><span class="line">    primaryCpuAbi=null</span><br><span class="line">    secondaryCpuAbi=null</span><br><span class="line">    versionCode=74 minSdk=15 targetSdk=25</span><br><span class="line">    versionName=1.1.74</span><br><span class="line">    splits=[base]</span><br><span class="line">    apkSigningVersion=2</span><br><span class="line">    applicationInfo=ApplicationInfo&#123;7754242 org.mazhuang.guanggoo&#125;</span><br><span class="line">    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class="line">    privateFlags=[ RESIZEABLE_ACTIVITIES ]</span><br><span class="line">    dataDir=/data/user/0/org.mazhuang.guanggoo</span><br><span class="line">    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]</span><br><span class="line">    timeStamp=2017-10-22 23:50:53</span><br><span class="line">    firstInstallTime=2017-10-22 23:50:25</span><br><span class="line">    lastUpdateTime=2017-10-22 23:50:55</span><br><span class="line">    installerPackageName=com.miui.packageinstaller</span><br><span class="line">    signatures=PackageSignatures&#123;af09595 [53c7caa2]&#125;</span><br><span class="line">    installPermissionsFixed=<span class="literal">true</span> installStatus=1</span><br><span class="line">    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class="line">    requested permissions:</span><br><span class="line">      android.permission.READ_PHONE_STATE</span><br><span class="line">      android.permission.INTERNET</span><br><span class="line">      android.permission.ACCESS_NETWORK_STATE</span><br><span class="line">      android.permission.ACCESS_WIFI_STATE</span><br><span class="line">      android.permission.READ_LOGS</span><br><span class="line">      android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">      android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">    install permissions:</span><br><span class="line">      android.permission.INTERNET: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.ACCESS_NETWORK_STATE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.ACCESS_WIFI_STATE: granted=<span class="literal">true</span></span><br><span class="line">    User 0: ceDataInode=1155675 installed=<span class="literal">true</span> hidden=<span class="literal">false</span> suspended=<span class="literal">false</span> stopped=<span class="literal">true</span> notLaunched=<span class="literal">false</span> enabled=0</span><br><span class="line">      gids=[3003]</span><br><span class="line">      runtime permissions:</span><br><span class="line">        android.permission.READ_EXTERNAL_STORAGE: granted=<span class="literal">true</span></span><br><span class="line">        android.permission.READ_PHONE_STATE: granted=<span class="literal">true</span></span><br><span class="line">        android.permission.WRITE_EXTERNAL_STORAGE: granted=<span class="literal">true</span></span><br><span class="line">    User 999: ceDataInode=0 installed=<span class="literal">false</span> hidden=<span class="literal">false</span> suspended=<span class="literal">false</span> stopped=<span class="literal">true</span> notLaunched=<span class="literal">true</span> enabled=0</span><br><span class="line">      gids=[3003]</span><br><span class="line">      runtime permissions:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dexopt state:</span><br><span class="line">  [org.mazhuang.guanggoo]</span><br><span class="line">    Instruction Set: arm64</span><br><span class="line">      path: /data/app/org.mazhuang.guanggoo-2/base.apk</span><br><span class="line">      status: /data/app/org.mazhuang.guanggoo-2/oat/arm64/base.odex [compilation_filter=speed-profile, status=kOatUpToDa</span><br><span class="line">      te]</span><br></pre></td></tr></table></figure><h3 id="查看应用安装路径"><a href="#查看应用安装路径" class="headerlink" title="查看应用安装路径"></a>查看应用安装路径</h3><p>命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm path &lt;PACKAGE&gt;</span><br></pre></td></tr></table></figure><p>输出应用安装路径</p><p>输出示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm path ecarx.weather</span><br><span class="line"></span><br><span class="line">package:/data/app/ecarx.weather-1.apk</span><br></pre></td></tr></table></figure><h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令，常用的 <code>&lt;command&gt;</code> 如下：</p><table><thead><tr><th>command</th><th>用途</th></tr></thead><tbody><tr><td><code>start [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td></tr><tr><td><code>startservice [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td></tr><tr><td><code>broadcast [options] &lt;INTENT&gt;</code></td><td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td></tr><tr><td><code>force-stop &lt;packagename&gt;</code></td><td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。</p><p>用于决定 intent 对象的选项如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-a &lt;ACTION&gt;</code></td><td>指定 action，比如 <code>android.intent.action.VIEW</code></td></tr><tr><td><code>-c &lt;CATEGORY&gt;</code></td><td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>-n &lt;COMPONENT&gt;</code></td><td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>--esn &lt;EXTRA_KEY&gt;</code></td><td>null 值（只有 key 名）</td></tr><tr><td>`-e</td><td>–es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;`</td><td>string 值</td></tr><tr><td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td><td>boolean 值</td></tr><tr><td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td><td>integer 值</td></tr><tr><td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td><td>long 值</td></tr><tr><td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td><td>float 值</td></tr><tr><td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td><td>URI</td></tr><tr><td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td><td>component name</td></tr><tr><td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td><td>integer 数组</td></tr><tr><td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td><td>long 数组</td></tr></tbody></table><h3 id="启动应用-调起-Activity"><a href="#启动应用-调起-Activity" class="headerlink" title="启动应用/ 调起 Activity"></a>启动应用/ 调起 Activity</h3><p>命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start [options] &lt;INTENT&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.tencent.mm/.ui.LauncherUI</span><br></pre></td></tr></table></figure><p>表示调起微信主界面。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n org.mazhuang.boottimemeasure/.MainActivity --es <span class="string">"toast"</span> <span class="string">"hello, world"</span></span><br></pre></td></tr></table></figure><p>表示调起 <code>org.mazhuang.boottimemeasure/.MainActivity</code> 并传给它 string 数据键值对 <code>toast - hello, world</code>。</p><h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><p>命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice [options] &lt;INTENT&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</span><br></pre></td></tr></table></figure><p>表示调起微信的某 Service。</p><p>另外一个典型的用例是如果设备上原本应该显示虚拟按键但是没有显示，可以试试这个：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice -n com.android.systemui/.SystemUIService</span><br></pre></td></tr></table></figure><h3 id="停止-Service"><a href="#停止-Service" class="headerlink" title="停止 Service"></a>停止 Service</h3><p>命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am stopservice [options] &lt;INTENT&gt;</span><br></pre></td></tr></table></figure><h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><p>命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast [options] &lt;INTENT&gt;</span><br></pre></td></tr></table></figure><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>例如，向所有组件广播 <code>BOOT_COMPLETED</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</span><br></pre></td></tr></table></figure><p>又例如，只向 <code>org.mazhuang.boottimemeasure/.BootCompletedReceiver</code> 广播 <code>BOOT_COMPLETED</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver</span><br></pre></td></tr></table></figure><p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。</p><p>既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机：</p><table><thead><tr><th>action</th><th>触发时机</th></tr></thead><tbody><tr><td>android.net.conn.CONNECTIVITY_CHANGE</td><td>网络连接发生变化</td></tr><tr><td>android.intent.action.SCREEN_ON</td><td>屏幕点亮</td></tr><tr><td>android.intent.action.SCREEN_OFF</td><td>屏幕熄灭</td></tr><tr><td>android.intent.action.BATTERY_LOW</td><td>电量低，会弹出电量低提示框</td></tr><tr><td>android.intent.action.BATTERY_OKAY</td><td>电量恢复了</td></tr><tr><td>android.intent.action.BOOT_COMPLETED</td><td>设备启动完毕</td></tr><tr><td>android.intent.action.DEVICE_STORAGE_LOW</td><td>存储空间过低</td></tr><tr><td>android.intent.action.DEVICE_STORAGE_OK</td><td>存储空间恢复</td></tr><tr><td>android.intent.action.PACKAGE_ADDED</td><td>安装了新的应用</td></tr><tr><td>android.net.wifi.STATE_CHANGE</td><td>WiFi 连接状态发生变化</td></tr><tr><td>android.net.wifi.WIFI_STATE_CHANGED</td><td>WiFi 状态变为启用/关闭/正在启动/正在关闭/未知</td></tr><tr><td>android.intent.action.BATTERY_CHANGED</td><td>电池电量发生变化</td></tr><tr><td>android.intent.action.INPUT_METHOD_CHANGED</td><td>系统输入法发生变化</td></tr><tr><td>android.intent.action.ACTION_POWER_CONNECTED</td><td>外部电源连接</td></tr><tr><td>android.intent.action.ACTION_POWER_DISCONNECTED</td><td>外部电源断开连接</td></tr><tr><td>android.intent.action.DREAMING_STARTED</td><td>系统开始休眠</td></tr><tr><td>android.intent.action.DREAMING_STOPPED</td><td>系统停止休眠</td></tr><tr><td>android.intent.action.WALLPAPER_CHANGED</td><td>壁纸发生变化</td></tr><tr><td>android.intent.action.HEADSET_PLUG</td><td>插入耳机</td></tr><tr><td>android.intent.action.MEDIA_UNMOUNTED</td><td>卸载外部介质</td></tr><tr><td>android.intent.action.MEDIA_MOUNTED</td><td>挂载外部介质</td></tr><tr><td>android.os.action.POWER_SAVE_MODE_CHANGED</td><td>省电模式开启</td></tr></tbody></table><p><em>（以上广播均可使用 adb 触发）</em></p><h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p>命令示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop com.qihoo360.mobilesafe</span><br></pre></td></tr></table></figure><p>表示停止 360 安全卫士的一切进程与服务。</p><h3 id="收紧内存"><a href="#收紧内存" class="headerlink" title="收紧内存"></a>收紧内存</h3><p>命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am send-trim-memory  &lt;pid&gt; &lt;level&gt;</span><br></pre></td></tr></table></figure></p><p>pid: 进程 ID<br>level:<br>    HIDDEN、RUNNING_MODERATE、BACKGROUND、<br>    RUNNING_LOW、MODERATE、RUNNING_CRITICAL、COMPLETE</p><p>命令示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am send-trim-memory 12345 RUNNING_LOW</span><br></pre></td></tr></table></figure><p>表示向 pid=12345 的进程，发出 level=RUNNING_LOW 的收紧内存命令。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</span><br></pre></td></tr></table></figure><p>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</p><p>例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sr.mp4 ~/tmp/</span><br></pre></td></tr></table></figure><p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 <code>adb shell</code> 和 <code>su</code> 命令在 adb shell 里获取 root 权限后，先 <code>cp /path/on/device /sdcard/filename</code> 将文件复制到 sdcard，然后 <code>adb pull /sdcard/filename /path/on/pc</code>。</p><h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push ~/sr.mp4 /sdcard/</span><br></pre></td></tr></table></figure><p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 <code>adb push /path/on/pc /sdcard/filename</code>，然后 <code>adb shell</code> 和 <code>su</code> 在 adb shell 里获取 root 权限后，<code>cp /sdcard/filename /path/on/device</code>。</p><h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，通过它可以做一些有趣的事情。</p><p><code>input</code> 命令的完整 help 信息如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Usage: input [&lt;<span class="built_in">source</span>&gt;] &lt;<span class="built_in">command</span>&gt; [&lt;arg&gt;...]</span><br><span class="line"></span><br><span class="line">The sources are:</span><br><span class="line">      mouse</span><br><span class="line">      keyboard</span><br><span class="line">      joystick</span><br><span class="line">      touchnavigation</span><br><span class="line">      touchpad</span><br><span class="line">      trackball</span><br><span class="line">      stylus</span><br><span class="line">      dpad</span><br><span class="line">      gesture</span><br><span class="line">      touchscreen</span><br><span class="line">      gamepad</span><br><span class="line"></span><br><span class="line">The commands and default sources are:</span><br><span class="line">      text &lt;string&gt; (Default: touchscreen)</span><br><span class="line">      keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard)</span><br><span class="line">      tap &lt;x&gt; &lt;y&gt; (Default: touchscreen)</span><br><span class="line">      swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen)</span><br><span class="line">      press (Default: trackball)</span><br><span class="line">      roll &lt;dx&gt; &lt;dy&gt; (Default: trackball)</span><br></pre></td></tr></table></figure><p>比如使用 <code>adb shell input keyevent &lt;keycode&gt;</code> 命令，不同的 keycode 能实现不同的功能，完整的 keycode 列表详见 <a href="https://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="noopener">KeyEvent</a>，摘引部分我觉得有意思的如下：</p><table><thead><tr><th>keycode</th><th>含义</th></tr></thead><tbody><tr><td>3</td><td>HOME 键</td></tr><tr><td>4</td><td>返回键</td></tr><tr><td>5</td><td>打开拨号应用</td></tr><tr><td>6</td><td>挂断电话</td></tr><tr><td>24</td><td>增加音量</td></tr><tr><td>25</td><td>降低音量</td></tr><tr><td>26</td><td>电源键</td></tr><tr><td>27</td><td>拍照（需要在相机应用里）</td></tr><tr><td>64</td><td>打开浏览器</td></tr><tr><td>82</td><td>菜单键</td></tr><tr><td>85</td><td>播放/暂停</td></tr><tr><td>86</td><td>停止播放</td></tr><tr><td>87</td><td>播放下一首</td></tr><tr><td>88</td><td>播放上一首</td></tr><tr><td>122</td><td>移动光标到行首或列表顶部</td></tr><tr><td>123</td><td>移动光标到行末或列表底部</td></tr><tr><td>126</td><td>恢复播放</td></tr><tr><td>127</td><td>暂停播放</td></tr><tr><td>164</td><td>静音</td></tr><tr><td>176</td><td>打开系统设置</td></tr><tr><td>187</td><td>切换应用</td></tr><tr><td>207</td><td>打开联系人</td></tr><tr><td>208</td><td>打开日历</td></tr><tr><td>209</td><td>打开音乐</td></tr><tr><td>210</td><td>打开计算器</td></tr><tr><td>220</td><td>降低屏幕亮度</td></tr><tr><td>221</td><td>提高屏幕亮度</td></tr><tr><td>223</td><td>系统休眠</td></tr><tr><td>224</td><td>点亮屏幕</td></tr><tr><td>231</td><td>打开语音助手</td></tr><tr><td>276</td><td>如果没有 wakelock 则让系统休眠</td></tr></tbody></table><p>下面是 <code>input</code> 命令的一些用法举例。</p><h3 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 26</span><br></pre></td></tr></table></figure><p>执行效果相当于按电源键。</p><h3 id="菜单键"><a href="#菜单键" class="headerlink" title="菜单键"></a>菜单键</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 82</span><br></pre></td></tr></table></figure><h3 id="HOME-键"><a href="#HOME-键" class="headerlink" title="HOME 键"></a>HOME 键</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 3</span><br></pre></td></tr></table></figure><h3 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 4</span><br></pre></td></tr></table></figure><h3 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h3><p>增加音量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 24</span><br></pre></td></tr></table></figure><p>降低音量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 25</span><br></pre></td></tr></table></figure><p>静音：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 164</span><br></pre></td></tr></table></figure><h3 id="媒体控制"><a href="#媒体控制" class="headerlink" title="媒体控制"></a>媒体控制</h3><p>播放/暂停：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 85</span><br></pre></td></tr></table></figure><p>停止播放：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 86</span><br></pre></td></tr></table></figure><p>播放下一首：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 87</span><br></pre></td></tr></table></figure><p>播放上一首：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 88</span><br></pre></td></tr></table></figure><p>恢复播放：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 126</span><br></pre></td></tr></table></figure><p>暂停播放：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 127</span><br></pre></td></tr></table></figure><h3 id="点亮-熄灭屏幕"><a href="#点亮-熄灭屏幕" class="headerlink" title="点亮/熄灭屏幕"></a>点亮/熄灭屏幕</h3><p>可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。</p><p>点亮屏幕：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 224</span><br></pre></td></tr></table></figure><p>熄灭屏幕：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 223</span><br></pre></td></tr></table></figure><h3 id="滑动解锁"><a href="#滑动解锁" class="headerlink" title="滑动解锁"></a>滑动解锁</h3><p>如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 <code>input swipe</code> 来解锁。</p><p>命令（参数以机型 Nexus 5，向上滑动手势解锁举例）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe 300 1000 300 500</span><br></pre></td></tr></table></figure><p>参数 <code>300 1000 300 500</code> 分别表示<code>起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标</code>。</p><h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>在焦点处于某文本框时，可以通过 <code>input</code> 命令来输入文本。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text hello</span><br></pre></td></tr></table></figure><p>现在 <code>hello</code> 出现在文本框了。</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p><h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><p>命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...</span><br></pre></td></tr></table></figure><p>常用用法列举如下：</p><h4 id="按级别过滤日志"><a href="#按级别过滤日志" class="headerlink" title="按级别过滤日志"></a>按级别过滤日志</h4><p>Android 的日志分为如下几个优先级（priority）：</p><ul><li>V —— Verbose（最低，输出得最多）</li><li>D —— Debug</li><li>I —— Info</li><li>W —— Warning</li><li>E —— Error</li><li>F —— Fatal</li><li>S —— Silent（最高，啥也不输出）</li></ul><p>按某级别过滤日志则会将该级别及以上的日志输出。</p><p>比如，命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat *:W</span><br></pre></td></tr></table></figure><p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p><p>（<strong>注：</strong> 在 macOS 下需要给 <code>*:W</code> 这样以 <code>*</code> 作为 tag 的参数加双引号，如 <code>adb logcat &quot;*:W&quot;</code>，不然会报错 <code>no matches found: *:W</code>。）</p><h4 id="按-tag-和级别过滤日志"><a href="#按-tag-和级别过滤日志" class="headerlink" title="按 tag 和级别过滤日志"></a>按 tag 和级别过滤日志</h4><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p><p>比如，命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure><p>表示输出 tag <code>ActivityManager</code> 的 Info 以上级别日志，输出 tag <code>MyApp</code> 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p>可以用 <code>adb logcat -v &lt;format&gt;</code> 选项指定日志输出格式。</p><p>日志支持按以下几种 <code>&lt;format&gt;</code>：</p><ul><li><p>brief</p><p>默认格式。格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</span><br></pre></td></tr></table></figure></li><li><p>process</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D( 1785) Disconnected process message: 10, size: 0  (HeadsetStateMachine)</span><br></pre></td></tr></table></figure></li><li><p>tag</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/HeadsetStateMachine: Disconnected process message: 10, size: 0</span><br></pre></td></tr></table></figure></li><li><p>raw</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Disconnected process message: 10, size: 0</span><br></pre></td></tr></table></figure></li><li><p>time</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">08-28 22:39:39.974 D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</span><br></pre></td></tr></table></figure></li><li><p>threadtime</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">08-28 22:39:39.974  1785  1832 D HeadsetStateMachine: Disconnected process message: 10, size: 0</span><br></pre></td></tr></table></figure></li><li><p>long</p><p>格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt; ]</span><br><span class="line">&lt;message&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 08-28 22:39:39.974  1785: 1832 D/HeadsetStateMachine ]</span><br><span class="line">Disconnected process message: 10, size: 0</span><br></pre></td></tr></table></figure></li></ul><p>指定格式可与上面的过滤同时使用。比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v long ActivityManager:I *:S</span><br></pre></td></tr></table></figure><h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure><h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dmesg</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;6&gt;[14201.684016] PM: noirq resume of devices complete after 0.982 msecs</span><br><span class="line">&lt;6&gt;[14201.685525] PM: early resume of devices complete after 0.838 msecs</span><br><span class="line">&lt;6&gt;[14201.753642] PM: resume of devices complete after 68.106 msecs</span><br><span class="line">&lt;4&gt;[14201.755954] Restarting tasks ... <span class="keyword">done</span>.</span><br><span class="line">&lt;6&gt;[14201.771229] PM: <span class="built_in">suspend</span> <span class="built_in">exit</span> 2016-08-28 13:31:32.679217193 UTC</span><br><span class="line">&lt;6&gt;[14201.872373] PM: <span class="built_in">suspend</span> entry 2016-08-28 13:31:32.780363596 UTC</span><br><span class="line">&lt;6&gt;[14201.872498] PM: Syncing filesystems ... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>中括号里的 <code>[14201.684016]</code> 代表内核开始启动后的时间，单位为秒。</p><p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 <code>Freeing init memory</code> 那一行前面的时间就是。</p><h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><h3 id="型号"><a href="#型号" class="headerlink" title="型号"></a>型号</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.model</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nexus 5</span><br></pre></td></tr></table></figure><h3 id="电池状况"><a href="#电池状况" class="headerlink" title="电池状况"></a>电池状况</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys battery</span><br></pre></td></tr></table></figure><p>输入示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Current Battery Service state:</span><br><span class="line">  AC powered: <span class="literal">false</span></span><br><span class="line">  USB powered: <span class="literal">true</span></span><br><span class="line">  Wireless powered: <span class="literal">false</span></span><br><span class="line">  status: 2</span><br><span class="line">  health: 2</span><br><span class="line">  present: <span class="literal">true</span></span><br><span class="line">  level: 44</span><br><span class="line">  scale: 100</span><br><span class="line">  voltage: 3872</span><br><span class="line">  temperature: 280</span><br><span class="line">  technology: Li-poly</span><br></pre></td></tr></table></figure><p>其中 <code>scale</code> 代表最大电量，<code>level</code> 代表当前电量。上面的输出表示还剩下 44% 的电量。</p><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Physical size: 1080x1920</span><br></pre></td></tr></table></figure><p>该设备屏幕分辨率为 1080px * 1920px。</p><p>如果使用命令修改过，那输出可能是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Physical size: 1080x1920</span><br><span class="line">Override size: 480x1024</span><br></pre></td></tr></table></figure><p>表明设备的屏幕分辨率原本是 1080px <em> 1920px，当前被修改为 480px </em> 1024px。</p><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Physical density: 420</span><br></pre></td></tr></table></figure><p>该设备屏幕密度为 420dpi。</p><p>如果使用命令修改过，那输出可能是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Physical density: 480</span><br><span class="line">Override density: 160</span><br></pre></td></tr></table></figure><p>表明设备的屏幕密度原来是 480dpi，当前被修改为 160dpi。</p><h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window displays</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)</span><br><span class="line">  Display: mDisplayId=0</span><br><span class="line">    init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1810x1731</span><br><span class="line">    deferred=<span class="literal">false</span> layoutNeeded=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>其中 <code>mDisplayId</code> 为 显示屏编号，<code>init</code> 是初始分辨率和屏幕密度，<code>app</code> 的高度比 <code>init</code> 里的要小，表示屏幕底部有虚拟按键，高度为 1920 - 1794 = 126px 合 42dp。</p><h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get secure android_id</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51b6be48bac8c569</span><br></pre></td></tr></table></figure><h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><p>在 Android 4.4 及以下版本可通过如下命令获取 IMEI：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys iphonesubinfo</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Phone Subscriber Info:</span><br><span class="line">  Phone Type = GSM</span><br><span class="line">  Device ID = 860955027785041</span><br></pre></td></tr></table></figure><p>其中的 <code>Device ID</code> 就是 IMEI。</p><p>而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">service call iphonesubinfo 1</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Result: Parcel(</span><br><span class="line">  0x00000000: 00000000 0000000f 00360038 00390030 <span class="string">'........8.6.0.9.'</span></span><br><span class="line">  0x00000010: 00350035 00320030 00370037 00350038 <span class="string">'5.5.0.2.7.7.8.5.'</span></span><br><span class="line">  0x00000020: 00340030 00000031                   <span class="string">'0.4.1...        '</span>)</span><br></pre></td></tr></table></figure><p>把里面的有效内容提取出来就是 IMEI 了，比如这里的是 <code>860955027785041</code>。</p><p>参考：<a href="http://stackoverflow.com/questions/27002663/adb-shell-dumpsys-iphonesubinfo-not-working-since-android-5-0-lollipop" target="_blank" rel="noopener">adb shell dumpsys iphonesubinfo not working since Android 5.0 Lollipop</a></p><h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.0.2</span><br></pre></td></tr></table></figure><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>每次想知道设备的 IP 地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过 adb 可以方便地查看。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ifconfig | grep Mask</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inet addr:10.130.245.230  Mask:255.255.255.252</span><br><span class="line">inet addr:127.0.0.1  Mask:255.0.0.0</span><br></pre></td></tr></table></figure><p>那么 <code>10.130.245.230</code> 就是设备 IP 地址。</p><p>在有的设备上这个命令没有输出，如果设备连着 WiFi，可以使用如下命令来查看局域网 IP：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ifconfig wlan0</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wlan0: ip 10.129.160.99 mask 255.255.240.0 flags [up broadcast running multicast]</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wlan0     Link encap:UNSPEC</span><br><span class="line">          inet addr:10.129.168.57  Bcast:10.129.175.255  Mask:255.255.240.0</span><br><span class="line">          inet6 addr: fe80::66cc:2eff:fe68:b6b6/64 Scope: Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:496520 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:68215 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:3000</span><br><span class="line">          RX bytes:116266821 TX bytes:8311736</span><br></pre></td></tr></table></figure><p>如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell netcfg</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wlan0    UP                               10.129.160.99/20  0x00001043 f8:a9:d0:17:42:4d</span><br><span class="line">lo       UP                                   127.0.0.1/8   0x00000049 00:00:00:00:00:00</span><br><span class="line">p2p0     UP                                     0.0.0.0/0   0x00001003 fa:a9:d0:17:42:4d</span><br><span class="line">sit0     DOWN                                   0.0.0.0/0   0x00000080 00:00:00:00:00:00</span><br><span class="line">rmnet0   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet1   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet3   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet2   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet4   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet6   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet5   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rmnet7   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</span><br><span class="line">rev_rmnet3 DOWN                                   0.0.0.0/0   0x00001002 4e:b7:e4:2e:17:58</span><br><span class="line">rev_rmnet2 DOWN                                   0.0.0.0/0   0x00001002 4e:f0:c8:bf:7a:cf</span><br><span class="line">rev_rmnet4 DOWN                                   0.0.0.0/0   0x00001002 a6:c0:3b:6b:c4:1f</span><br><span class="line">rev_rmnet6 DOWN                                   0.0.0.0/0   0x00001002 66:bb:5d:64:2e:e9</span><br><span class="line">rev_rmnet5 DOWN                                   0.0.0.0/0   0x00001002 0e:1b:eb:b9:23:a0</span><br><span class="line">rev_rmnet7 DOWN                                   0.0.0.0/0   0x00001002 7a:d9:f6:81:40:5a</span><br><span class="line">rev_rmnet8 DOWN                                   0.0.0.0/0   0x00001002 4e:e2:a9:bb:d0:1b</span><br><span class="line">rev_rmnet0 DOWN                                   0.0.0.0/0   0x00001002 fe:65:d0:ca:82:a9</span><br><span class="line">rev_rmnet1 DOWN                                   0.0.0.0/0   0x00001002 da:d8:e8:4f:2e:fe</span><br></pre></td></tr></table></figure><p>可以看到网络连接名称、启用状态、IP 地址和 Mac 地址等信息。</p><h3 id="Mac-地址"><a href="#Mac-地址" class="headerlink" title="Mac 地址"></a>Mac 地址</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/class/net/wlan0/address</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f8:a9:d0:17:42:4d</span><br></pre></td></tr></table></figure><p>这查看的是局域网 Mac 地址，移动网络或其它连接的信息可以通过前面的小节「IP 地址」里提到的 <code>adb shell netcfg</code> 命令来查看。</p><h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Processor       : ARMv7 Processor rev 0 (v7l)</span><br><span class="line">processor       : 0</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line"></span><br><span class="line">Features        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</span><br><span class="line">CPU implementer : 0x51</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x2</span><br><span class="line">CPU part        : 0x06f</span><br><span class="line">CPU revision    : 0</span><br><span class="line"></span><br><span class="line">Hardware        : Qualcomm MSM 8974 HAMMERHEAD (Flattened Device Tree)</span><br><span class="line">Revision        : 000b</span><br><span class="line">Serial          : 0000000000000000</span><br></pre></td></tr></table></figure><p>这是 Nexus 5 的 CPU 信息，我们从输出里可以看到使用的硬件是 <code>Qualcomm MSM 8974</code>，processor 的编号是 0 到 3，所以它是四核的，采用的架构是 <code>ARMv7 Processor rev 0 (v71)</code>。</p><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/meminfo</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        1027424 kB</span><br><span class="line">MemFree:          486564 kB</span><br><span class="line">Buffers:           15224 kB</span><br><span class="line">Cached:            72464 kB</span><br><span class="line">SwapCached:        24152 kB</span><br><span class="line">Active:           110572 kB</span><br><span class="line">Inactive:         259060 kB</span><br><span class="line">Active(anon):      79176 kB</span><br><span class="line">Inactive(anon):   207736 kB</span><br><span class="line">Active(file):      31396 kB</span><br><span class="line">Inactive(file):    51324 kB</span><br><span class="line">Unevictable:        3948 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">HighTotal:        409600 kB</span><br><span class="line">HighFree:         132612 kB</span><br><span class="line">LowTotal:         617824 kB</span><br><span class="line">LowFree:          353952 kB</span><br><span class="line">SwapTotal:        262140 kB</span><br><span class="line">SwapFree:         207572 kB</span><br><span class="line">Dirty:                 0 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        265324 kB</span><br><span class="line">Mapped:            47072 kB</span><br><span class="line">Shmem:              1020 kB</span><br><span class="line">Slab:              57372 kB</span><br><span class="line">SReclaimable:       7692 kB</span><br><span class="line">SUnreclaim:        49680 kB</span><br><span class="line">KernelStack:        4512 kB</span><br><span class="line">PageTables:         5912 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:      775852 kB</span><br><span class="line">Committed_AS:   13520632 kB</span><br><span class="line">VmallocTotal:     385024 kB</span><br><span class="line">VmallocUsed:       61004 kB</span><br><span class="line">VmallocChunk:     209668 kB</span><br></pre></td></tr></table></figure><p>其中，<code>MemTotal</code> 就是设备的总内存，<code>MemFree</code> 是当前空闲内存。</p><h3 id="更多硬件与系统属性"><a href="#更多硬件与系统属性" class="headerlink" title="更多硬件与系统属性"></a>更多硬件与系统属性</h3><p>设备的更多硬件与系统属性可以通过如下命令查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /system/build.prop</span><br></pre></td></tr></table></figure><p>这会输出很多信息，包括前面几个小节提到的「型号」和「Android 系统版本」等。</p><p>输出里还包括一些其它有用的信息，它们也可通过 <code>adb shell getprop &lt;属性名&gt;</code> 命令单独查看，列举一部分属性如下：</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>ro.build.version.sdk</td><td>SDK 版本</td></tr><tr><td>ro.build.version.release</td><td>Android 系统版本</td></tr><tr><td>ro.build.version.security_patch</td><td>Android 安全补丁程序级别</td></tr><tr><td>ro.product.model</td><td>型号</td></tr><tr><td>ro.product.brand</td><td>品牌</td></tr><tr><td>ro.product.name</td><td>设备名</td></tr><tr><td>ro.product.board</td><td>处理器型号</td></tr><tr><td>ro.product.cpu.abilist</td><td>CPU 支持的 abi 列表[<em>节注一</em>]</td></tr><tr><td>persist.sys.isUsbOtgEnabled</td><td>是否支持 OTG</td></tr><tr><td>dalvik.vm.heapsize</td><td>每个应用程序的内存上限</td></tr><tr><td>ro.sf.lcd_density</td><td>屏幕密度</td></tr></tbody></table><p><em>节注一：</em></p><p>一些小厂定制的 ROM 可能修改过 CPU 支持的 abi 列表的属性名，如果用 <code>ro.product.cpu.abilist</code> 属性名查找不到，可以这样试试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /system/build.prop | grep ro.product.cpu.abi</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ro.product.cpu.abi=armeabi-v7a</span><br><span class="line">ro.product.cpu.abi2=armeabi</span><br></pre></td></tr></table></figure><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong> 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size 480x1024</span><br></pre></td></tr></table></figure><p>表示将分辨率修改为 480px * 1024px。</p><p>恢复原分辨率命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size reset</span><br></pre></td></tr></table></figure><h3 id="屏幕密度-1"><a href="#屏幕密度-1" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density 160</span><br></pre></td></tr></table></figure><p>表示将屏幕密度修改为 160dpi。</p><p>恢复原屏幕密度命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density reset</span><br></pre></td></tr></table></figure><h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm overscan 0,0,0,200</span><br></pre></td></tr></table></figure><p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p><p>恢复原显示区域命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm overscan reset</span><br></pre></td></tr></table></figure><h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global adb_enabled 0</span><br></pre></td></tr></table></figure><p>恢复：</p><p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p><p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p><h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control &lt;key-values&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p><table><thead><tr><th>key</th><th>含义</th></tr></thead><tbody><tr><td>immersive.full</td><td>同时隐藏</td></tr><tr><td>immersive.status</td><td>隐藏状态栏</td></tr><tr><td>immersive.navigation</td><td>隐藏导航栏</td></tr><tr><td>immersive.preconfirms</td><td>?</td></tr></tbody></table><p>这些键对应的值可则如下值用逗号组合：</p><table><thead><tr><th>value</th><th>含义</th></tr></thead><tbody><tr><td><code>apps</code></td><td>所有应用</td></tr><tr><td><code>*</code></td><td>所有界面</td></tr><tr><td><code>packagename</code></td><td>指定应用</td></tr><tr><td><code>-packagename</code></td><td>排除指定应用</td></tr></tbody></table><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control immersive.full=*</span><br></pre></td></tr></table></figure><p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</span><br></pre></td></tr></table></figure><p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p><h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>截图保存到电脑：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">exec</span>-out screencap -p &gt; sc.png</span><br></pre></td></tr></table></figure><p>如果 adb 版本较老，无法使用 <code>exec-out</code> 命令，这时候建议更新 adb 版本。无法更新的话可以使用以下麻烦点的办法：</p><p>先截图保存到设备里：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/sc.png</span><br></pre></td></tr></table></figure><p>然后将 png 文件导出到电脑：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sc.png</span><br></pre></td></tr></table></figure><p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>指定保存文件为 png 格式</td></tr><tr><td>-d display-id</td><td>指定截图的显示屏编号（有多显示屏的情况下）</td></tr></tbody></table><p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p><p>另外一种一行命令截图并保存到电脑的方法：</p><p><em>Linux 和 Windows</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p | sed <span class="string">"s/\r$//"</span> &gt; sc.png</span><br></pre></td></tr></table></figure><p><em>Mac OS X</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p | gsed <span class="string">"s/\r$//"</span> &gt; sc.png</span><br></pre></td></tr></table></figure><p>这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="noopener">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p><p>而在 Mac 下使用系统自带的 sed 命令会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed: RE error: illegal byte sequence</span><br></pre></td></tr></table></figure><p>需要安装 gnu-sed，然后使用 gsed 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnu-sed</span><br></pre></td></tr></table></figure><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/filename.mp4</span><br></pre></td></tr></table></figure><p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p><p>如果需要导出到电脑：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/filename.mp4</span><br></pre></td></tr></table></figure><p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–size WIDTHxHEIGHT</td><td>视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td></tr><tr><td>–bit-rate RATE</td><td>视频的比特率，默认是 4Mbps。</td></tr><tr><td>–time-limit TIME</td><td>录制时长，单位秒。</td></tr><tr><td>–verbose</td><td>输出更多信息。</td></tr></tbody></table><h3 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p><p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><ol><li><p>进入 shell 并切换到 root 用户权限。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br></pre></td></tr></table></figure></li><li><p>查看当前分区挂载情况。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">rootfs / rootfs ro,relatime 0 0</span><br><span class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</span><br><span class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</span><br><span class="line">proc /proc proc rw,relatime 0 0</span><br><span class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</span><br><span class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</span><br><span class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</span><br><span class="line">none /acct cgroup rw,relatime,cpuacct 0 0</span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</span><br><span class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</span><br><span class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</span><br><span class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</span><br><span class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</span><br><span class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</span><br><span class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</span><br><span class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</span><br><span class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</span><br><span class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</span><br><span class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</span><br></pre></td></tr></table></figure><p>找到其中我们关注的带 /system 的那一行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</span><br></pre></td></tr></table></figure></li><li><p>重新挂载。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</span><br></pre></td></tr></table></figure><p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p></li></ol><p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p><h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cat /data/misc/wifi/*.conf</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">network=&#123;</span><br><span class="line">ssid=<span class="string">"TP-LINK_9DFC"</span></span><br><span class="line">scan_ssid=1</span><br><span class="line">psk=<span class="string">"123456789"</span></span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">group=CCMP TKIP</span><br><span class="line">auth_alg=OPEN</span><br><span class="line">sim_num=1</span><br><span class="line">priority=13893</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=<span class="string">"TP-LINK_F11E"</span></span><br><span class="line">psk=<span class="string">"987654321"</span></span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">sim_num=1</span><br><span class="line">priority=17293</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p><h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">date -s 20160823.131500</span><br></pre></td></tr></table></figure><p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p><h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br></pre></td></tr></table></figure><p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p><h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><p>简单用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p &lt;packagename&gt; -v 500</span><br></pre></td></tr></table></figure><p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p><p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p><p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p><p>开启 WiFi：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell svc wifi <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>关闭 WiFi：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell svc wifi <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p><h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot recovery</span><br></pre></td></tr></table></figure><h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><ol><li><p>重启到 Recovery 模式。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot recovery</span><br></pre></td></tr></table></figure></li><li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p><p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p></li><li><p>通过 adb 上传和更新系统。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb sideload &lt;path-to-update.zip&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安全相关命令"><a href="#安全相关命令" class="headerlink" title="安全相关命令"></a>安全相关命令</h2><h3 id="启用-禁用-SELinux"><a href="#启用-禁用-SELinux" class="headerlink" title="启用/禁用 SELinux"></a>启用/禁用 SELinux</h3><p>启用 SELinux</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell setenforce 1</span><br></pre></td></tr></table></figure><p>禁用 SELinux</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell setenforce 0</span><br></pre></td></tr></table></figure><h3 id="启用-禁用-dm-verity"><a href="#启用-禁用-dm-verity" class="headerlink" title="启用/禁用 dm_verity"></a>启用/禁用 dm_verity</h3><p>启用 dm_verity</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb <span class="built_in">enable</span>-verity</span><br></pre></td></tr></table></figure><p>禁用 dm_verity</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb <span class="built_in">disable</span>-verity</span><br></pre></td></tr></table></figure><h2 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</span><br><span class="line">root      1     0     8904   788   ffffffff 00000000 S /init</span><br><span class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</span><br><span class="line">...</span><br><span class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</span><br><span class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</span><br><span class="line">...</span><br><span class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps</span><br></pre></td></tr></table></figure><p>各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>所属用户</td></tr><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PPID</td><td>父进程 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell top</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User 0%, System 6%, IOW 0%, IRQ 0%</span><br><span class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</span><br><span class="line"></span><br><span class="line">  PID PR CPU% S  <span class="comment">#THR     VSS     RSS PCY UID      Name</span></span><br><span class="line"> 8763  0   3% R     1  10640K   1064K  <span class="built_in">fg</span> shell    top</span><br><span class="line">  131  0   3% S     1      0K      0K  <span class="built_in">fg</span> root     dhd_dpc</span><br><span class="line"> 6144  0   0% S   115 1682004K 115916K  <span class="built_in">fg</span> system   system_server</span><br><span class="line">  132  0   0% S     1      0K      0K  <span class="built_in">fg</span> root     dhd_rxf</span><br><span class="line"> 1731  0   0% S     6  20288K    788K  <span class="built_in">fg</span> root     /system/bin/mpdecision</span><br><span class="line">  217  0   0% S     6  18008K    356K  <span class="built_in">fg</span> shell    /sbin/adbd</span><br><span class="line"> ...</span><br><span class="line"> 7779  2   0% S    19 1538748K  48896K  <span class="built_in">bg</span> u0_a71   com.sohu.inputmethod.sogou:classic</span><br><span class="line"> 7963  0   0% S    18 1561916K  59568K  <span class="built_in">fg</span> u0_a58   org.mazhuang.boottimemeasure</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>CPU%</td><td>当前瞬间占用 CPU 百分比</td></tr><tr><td>S</td><td>进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td></tr><tr><td>#THR</td><td>线程数</td></tr><tr><td>VSS</td><td>Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td></tr><tr><td>RSS</td><td>Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td></tr><tr><td>PCY</td><td>调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td></tr><tr><td>UID</td><td>进程所有者的用户 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</span><br><span class="line">    -m num  最多显示多少个进程</span><br><span class="line">    -n num  刷新多少次后退出</span><br><span class="line">    -d num  刷新时间间隔（单位秒，默认值 5）</span><br><span class="line">    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）</span><br><span class="line">    -t      显示线程信息</span><br><span class="line">    -h      显示帮助文档</span><br></pre></td></tr></table></figure><h3 id="查看进程-UID"><a href="#查看进程-UID" class="headerlink" title="查看进程 UID"></a>查看进程 UID</h3><p>有两种方案：</p><ol><li><p><code>adb shell dumpsys package &lt;packagename&gt; | grep userId=</code></p><p>如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell dumpsys package org.mazhuang.guanggoo | grep userId=</span><br><span class="line">   userId=10394</span><br></pre></td></tr></table></figure></li><li><p>通过 ps 命令找到对应进程的 pid 之后 <code>adb shell cat /proc/&lt;pid&gt;/status | grep Uid</code></p><p>如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br><span class="line">gemini:/ $ ps | grep org.mazhuang.guanggoo</span><br><span class="line">u0_a394   28635 770   1795812 78736 SyS_epoll_ 0000000000 S org.mazhuang.guanggoo</span><br><span class="line">gemini:/ $ cat /proc/28635/status | grep Uid</span><br><span class="line">Uid:    10394   10394   10394   10394</span><br><span class="line">gemini:/ $</span><br></pre></td></tr></table></figure></li></ol><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>cat</td><td>显示文件内容</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>chmod</td><td>改变文件的存取模式/访问权限</td></tr><tr><td>df</td><td>查看磁盘空间使用情况</td></tr><tr><td>grep</td><td>过滤输出</td></tr><tr><td>kill</td><td>杀死指定 PID 的进程</td></tr><tr><td>ls</td><td>列举目录内容</td></tr><tr><td>mount</td><td>挂载目录的查看和管理</td></tr><tr><td>mv</td><td>移动或重命名文件</td></tr><tr><td>ps</td><td>查看正在运行的进程</td></tr><tr><td>rm</td><td>删除文件</td></tr><tr><td>top</td><td>查看进程的资源占用情况</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: protocol fault (couldn<span class="string">'t read status): No error</span></span><br></pre></td></tr></table></figure><p><strong>可能原因</strong></p><p>adb server 进程想使用的 5037 端口被占用。</p><p><strong>解决方案</strong></p><p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr LISTENING</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里 1548 即为进程 ID，用命令结束该进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 1548</span><br></pre></td></tr></table></figure><p>然后再启动 adb 就没问题了。</p><h3 id="com-android-ddmlib-AdbCommandRejectedException"><a href="#com-android-ddmlib-AdbCommandRejectedException" class="headerlink" title="com.android.ddmlib.AdbCommandRejectedException"></a>com.android.ddmlib.AdbCommandRejectedException</h3><p>在 Android Studio 里新建一个模拟器，但是用 adb 一直连接不上，提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.android.ddmlib.AdbCommandRejectedException: device unauthorized.</span><br><span class="line">This adb server&apos;s $ADB_VENDOR_KEYS is not set</span><br><span class="line">Try &apos;adb kill-server&apos; if that seems wrong.</span><br><span class="line">Otherwise check for a confirmation dialog on your device.</span><br></pre></td></tr></table></figure><p>在手机上安装一个终端然后执行 su 提示没有该命令，这不正常。</p><p>于是删除该模拟器后重新下载安装一次，这次就正常了。</p><h2 id="adb-的非官方实现"><a href="#adb-的非官方实现" class="headerlink" title="adb 的非官方实现"></a>adb 的非官方实现</h2><ul><li><a href="https://github.com/facebook/fb-adb" target="_blank" rel="noopener">fb-adb</a> - A better shell for Android devices (for Mac).</li></ul><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul><li><a href="./related/aapt.md">aapt</a></li><li><a href="./related/am.md">am</a></li><li><a href="./related/dumpsys.md">dumsys</a></li><li><a href="./related/pm.md">pm</a></li><li><a href="./related/uiautomator.md">uiautomator</a></li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢朋友们无私的分享与补充（排名不分先后）。</p><p><a href="https://github.com/zxning" target="_blank" rel="noopener">zxning</a>，<a href="https://github.com/linhua55" target="_blank" rel="noopener">linhua55</a>，<a href="https://github.com/codeskyblue" target="_blank" rel="noopener">codeskyblue</a>，<a href="https://github.com/seasonyuu" target="_blank" rel="noopener">seasonyuu</a>，<a href="https://github.com/fan123199" target="_blank" rel="noopener">fan123199</a>，<a href="https://github.com/zhEdward" target="_blank" rel="noopener">zhEdward</a>，<a href="https://github.com/0x8BADFOOD" target="_blank" rel="noopener">0x8BADFOOD</a>，<a href="https://github.com/keith666666" target="_blank" rel="noopener">keith666666</a>，<a href="https://github.com/shawnlinboy" target="_blank" rel="noopener">shawnlinboy</a>，<a href="https://github.com/s-xq" target="_blank" rel="noopener">s-xq</a>，<a href="https://github.com/lucky9322" target="_blank" rel="noopener">lucky9322</a>。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">Android Debug Bridge</a></li><li><a href="https://developer.android.com/studio/command-line/shell.html" target="_blank" rel="noopener">ADB Shell Commands</a></li><li><a href="https://developer.android.com/studio/command-line/logcat.html" target="_blank" rel="noopener">logcat Command-line Tool</a></li><li><a href="http://zmywly8866.github.io/2015/01/24/all-adb-command.html" target="_blank" rel="noopener">Android ADB命令大全</a></li><li><a href="https://github.com/ZQiang94/StudyRecords/blob/master/other/src/main/java/com/other/adb%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.md" target="_blank" rel="noopener">adb 命令行的使用记录</a></li><li><a href="http://www.jianshu.com/p/860bc2bf1a6a" target="_blank" rel="noopener">Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等)</a></li><li><a href="http://yifeiyuan.me/2016/06/30/ADB%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">那些做Android开发必须知道的ADB命令</a></li><li><a href="http://blog.csdn.net/kittyboy0001/article/details/38562515" target="_blank" rel="noopener">adb shell top</a></li><li><a href="http://cabins.github.io/2016/03/25/UseAdbLikeAPro-2/" target="_blank" rel="noopener">像高手一样使用ADB命令行（2）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本篇文章为GitHub转载过来，&lt;a href=&quot;https://github.com/mzlogin/awesome-adb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ADB，即 
      
    
    </summary>
    
      <category term="Android" scheme="https://www.djangoz.com/categories/Android/"/>
    
    
      <category term="小技巧" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>基于图的bfs的电影天堂爬虫</title>
    <link href="https://www.djangoz.com/2017/12/31/Movie_heaven-crawler/"/>
    <id>https://www.djangoz.com/2017/12/31/Movie_heaven-crawler/</id>
    <published>2017-12-30T16:00:00.000Z</published>
    <updated>2018-06-10T13:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法(第四版)</a> 一书中图这一章的时候，发现网页也是图，网页之间的超链接就是图节点的连线，由此想到了用广度优先算法来遍历网站，爬取想要的信息。</p><p><a href="https://github.com/onlyless/Movie-heaven-crawler" target="_blank" rel="noopener">GitHub地址</a>,目录里面的movies.txt是在服务器上面跑了几个小时后，爬取了差不多三万个资源下载地址</p><h3 id="分析网页源码"><a href="#分析网页源码" class="headerlink" title="分析网页源码"></a>分析网页源码</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/movies-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由图可以看出电影天堂所有电影的链接都是以’/html….html’来表示的，于是就用正则表达式来匹配</p><h3 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h3><p>小程序里面用队列来实现bfs，并用set来储存每一个链接，这样就达到了防止重复爬取链接，使程序陷入死循环了</p><h3 id="匹配下载链接"><a href="#匹配下载链接" class="headerlink" title="匹配下载链接"></a>匹配下载链接</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/movies-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当爬虫到了电影页面，也用正则表达式来匹配ftp链接</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 main.py</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests,queue</span><br><span class="line"></span><br><span class="line">LINK = set()</span><br><span class="line">List = []</span><br><span class="line">times = <span class="number">10009970</span>    <span class="comment">#爬取资源的次数</span></span><br><span class="line"></span><br><span class="line">URL = <span class="string">"http://www.dytt8.net"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'http://www.dytt8.net/'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getftp</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        r = requests.get(URL+link,headers=headers)</span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        web = r.text</span><br><span class="line">        movies = re.findall(<span class="string">r'"(ftp[^\'"]+)"'</span>,web)</span><br><span class="line">        name = re.search(<span class="string">'&lt;title&gt;.+《(.+)》.+&lt;\/title&gt;'</span>,web).group(<span class="number">1</span>)</span><br><span class="line">        tplt = <span class="string">"&#123;0:&#123;2&#125;^10&#125;\t&#123;1:&#123;2&#125;^90&#125;\n"</span>           <span class="comment">#定义格式化字符串</span></span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">            List.append(tplt.format(name,movie,chr(<span class="number">12288</span>)))</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            print(num)</span><br><span class="line">            print(movie,name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"error getftp"</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(url)</span>:</span></span><br><span class="line">    Q = queue.Queue()       <span class="comment">#定义一个队列</span></span><br><span class="line">    Q.put(url)</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> Q.empty():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = Q.get()</span><br><span class="line">            r = requests.get(URL+url,headers=headers)</span><br><span class="line">            r.encoding=r.apparent_encoding</span><br><span class="line">            text = r.text</span><br><span class="line">            links = re.findall(<span class="string">r'[^\'"&lt;&gt;]+\.html'</span>,text)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            <span class="keyword">if</span> link <span class="keyword">in</span> LINK:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            getftp(link)</span><br><span class="line">            LINK.add(link)</span><br><span class="line">            Q.put(link)</span><br><span class="line">            <span class="keyword">if</span> num&gt;times:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#开始爬取的链接</span></span><br><span class="line">    url = <span class="string">'/plus/sitemap.html'</span></span><br><span class="line">    bfs(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'movies.txt'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> movies:</span><br><span class="line">        <span class="keyword">for</span> strs <span class="keyword">in</span> List:</span><br><span class="line">            movies.write(strs)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'urls.txt'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> url_file:</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> LINK:</span><br><span class="line">            url_file.write(URL+link+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看&lt;a href=&quot;https://book.douban.com/subject/19952400/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;算法(第四版)&lt;/a&gt; 一书中图这一章的时候，发现网页也是图，网页之间的超链接就是图节点的连线，由此想
      
    
    </summary>
    
      <category term="python" scheme="https://www.djangoz.com/categories/python/"/>
    
    
      <category term="小技巧" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>简单地用python玩了一下钓鱼网站</title>
    <link href="https://www.djangoz.com/2017/12/01/play/"/>
    <id>https://www.djangoz.com/2017/12/01/play/</id>
    <published>2017-11-30T16:00:00.000Z</published>
    <updated>2018-06-10T13:49:58.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近在空间里好友发了个遇到钓鱼网站的说说"><a href="#最近在空间里好友发了个遇到钓鱼网站的说说" class="headerlink" title="最近在空间里好友发了个遇到钓鱼网站的说说"></a>最近在空间里好友发了个遇到钓鱼网站的说说</h4><p>然后闲得无聊用python玩了一下这个网站。(本人水平比较渣，勿喷)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="打开这个网站显示的是登陆QQ邮箱的钓鱼网站"><a href="#打开这个网站显示的是登陆QQ邮箱的钓鱼网站" class="headerlink" title="打开这个网站显示的是登陆QQ邮箱的钓鱼网站"></a>打开这个网站显示的是登陆QQ邮箱的钓鱼网站</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="然后打开浏览器的开发者工具"><a href="#然后打开浏览器的开发者工具" class="headerlink" title="然后打开浏览器的开发者工具"></a>然后打开浏览器的开发者工具</h4><p>先随便输入一个账号密码，然后抓包，查到post的数据格式和目标网页<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="在图中可以看到post上去的网址"><a href="#在图中可以看到post上去的网址" class="headerlink" title="在图中可以看到post上去的网址"></a>在图中可以看到post上去的网址</h4><p>data的格式也知道了，就可以用python模拟post数据了，给网站提交点垃圾信息，以假乱真，这个还可以用IP代理和多线程来搞，博主现在还没达到那种级别，现在就是练练手</p><h4 id="贴一下代码"><a href="#贴一下代码" class="headerlink" title="贴一下代码"></a>贴一下代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,random</span><br><span class="line"></span><br><span class="line">times = <span class="number">100</span>     <span class="comment">#设置提交次数，我这里就做一下测试，提交的比较少</span></span><br><span class="line">url = <span class="string">'http://jiayaun.plshw.cn/mail/save.asp'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>:<span class="string">"http://jiayaun.plshw.cn/mail"</span>,</span><br><span class="line">&#125;</span><br><span class="line">passwd = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._-=!@#$%^&amp;*()"</span></span><br><span class="line">id = <span class="string">"0123456789"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passwd_generator</span><span class="params">()</span>:</span>     <span class="comment">#随机生成10-20位的密码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(random.choice(passwd) <span class="keyword">for</span> _ <span class="keyword">in</span> range(random.randint(<span class="number">10</span>,<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_generator</span><span class="params">()</span>:</span>     <span class="comment">#随机生成9位的QQ号码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(random.choice(id) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    time = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">"u"</span>:id_generator(),</span><br><span class="line">                <span class="string">"p"</span>:passwd_generator(),</span><br><span class="line">                <span class="string">"verifycode"</span>:<span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">            request = requests.post(url,headers = headers,data=data)</span><br><span class="line">            <span class="keyword">if</span> request.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">"已成功发送"</span>+str(time)+<span class="string">"次"</span>)</span><br><span class="line">                time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"ERROR"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="跑完代码又去查了一下这个域名的信息"><a href="#跑完代码又去查了一下这个域名的信息" class="headerlink" title="跑完代码又去查了一下这个域名的信息"></a>跑完代码又去查了一下这个域名的信息</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="通过域名信息留下的邮箱反查"><a href="#通过域名信息留下的邮箱反查" class="headerlink" title="通过域名信息留下的邮箱反查"></a>通过域名信息留下的邮箱反查</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里面域名比较多，就没一个一个去尝试了，这里面应该还有其他的钓鱼网站</p><h4 id="ping了一下这个域名得到IP地址"><a href="#ping了一下这个域名得到IP地址" class="headerlink" title="ping了一下这个域名得到IP地址"></a>ping了一下这个域名得到IP地址</h4><p>然后用nmap扫了一下该ip服务器的端口<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="最后用DOS玩了一下-第一次用这个"><a href="#最后用DOS玩了一下-第一次用这个" class="headerlink" title="最后用DOS玩了一下(第一次用这个)"></a>最后用DOS玩了一下(第一次用这个)</h4><p>弄的是钓鱼网站，应该不算违法吧,我可是遵纪守法的好公民，不会干坏事的(￣y▽,￣)╭<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/play_9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最近在空间里好友发了个遇到钓鱼网站的说说&quot;&gt;&lt;a href=&quot;#最近在空间里好友发了个遇到钓鱼网站的说说&quot; class=&quot;headerlink&quot; title=&quot;最近在空间里好友发了个遇到钓鱼网站的说说&quot;&gt;&lt;/a&gt;最近在空间里好友发了个遇到钓鱼网站的说说&lt;/h4&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="https://www.djangoz.com/categories/python/"/>
    
    
      <category term="小技巧" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 查看类UML关系图</title>
    <link href="https://www.djangoz.com/2017/11/19/idea_uml/"/>
    <id>https://www.djangoz.com/2017/11/19/idea_uml/</id>
    <published>2017-11-18T16:00:00.000Z</published>
    <updated>2018-06-10T13:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a><a href="#说明" title="说明"></a>说明</h4><p>平时写java代码的时候，代码经常会显得很长，很不容易看出Java类之间的关系<br>后来发现IDEA有一个很棒的功能，可以直接根据代码来查看改文件内的类UML关系图</p><h4 id="先去设置里面打开查看UML功能"><a href="#先去设置里面打开查看UML功能" class="headerlink" title="先去设置里面打开查看UML功能"></a>先去设置里面打开查看UML功能</h4><p>setting-&gt;plugins-&gt;搜索UML即可<br>把搜索出来这个插件选上</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/UML-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="查看java源代码内的类关系UML图"><a href="#查看java源代码内的类关系UML图" class="headerlink" title="查看java源代码内的类关系UML图"></a>查看java源代码内的类关系UML图</h4><p>双击shift键打开keymap，然后搜索UML,选择Show Local Changes as UML<br>直接按快捷键Ctrl+Alt+Shift+D也可以</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/UML-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/UML-3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在UML图内点击鼠标右键，Show Categories,可切换查看各个类的属性和概括图<br> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/UML-4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="查看类UML图可以放大"><a href="#查看类UML图可以放大" class="headerlink" title="查看类UML图可以放大"></a>查看类UML图可以放大</h4><p>觉得生成的UML图小？这都不是问题，按Alt键，即可放大查看UML图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/UML-5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="查看整个文件夹下的所有java类UML关系图"><a href="#查看整个文件夹下的所有java类UML关系图" class="headerlink" title="查看整个文件夹下的所有java类UML关系图"></a>查看整个文件夹下的所有java类UML关系图</h4><p></p><p>写java的时候通常不会把所有类放在一个源文件里面，这时候就需要查看整个文件夹内的Java类关系图了<br>而IDEA一样能做到，在左边的Project视图里面鼠标右键将要查看的文件夹，选择Diagrams-&gt;Show Diagrams-&gt;Java Class Diagrams即可<br> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/UML-6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#说明&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;平时写java代码的时候，代码经常会显得很长，很不容易看出Java类之间的关系&lt;b
      
    
    </summary>
    
      <category term="java" scheme="https://www.djangoz.com/categories/java/"/>
    
    
      <category term="小技巧" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>湖北工业大学教务系统查分,查课小程序</title>
    <link href="https://www.djangoz.com/2017/10/27/Login_hbut/"/>
    <id>https://www.djangoz.com/2017/10/27/Login_hbut/</id>
    <published>2017-10-26T16:00:00.000Z</published>
    <updated>2018-06-10T13:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴下github<a href="https://github.com/onlyless/login_hbut" target="_blank" rel="noopener">项目地址</a> (如果觉得这个程序好，求个star)</p><p>运行该小程序需安装requests和bs4库,还需要安装能操作excel的xlwt库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install bs4</span><br><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure><p><del>现在该程序不能自动识别验证码，需手动在控制台输入验证码,</del> 现可免输入验证码即可登陆（需先在github上获取该库，然后使用分支nocode）使用命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout nocode</span><br></pre></td></tr></table></figure><p>然后输入学号和密码即可查询，作者本人大二，所以现在可支持查询大一两个学期和大二上的成绩，成绩会自动保存在本地。<br>由于课表不好格式化输出，如需查课表，程序会生成一个excel文件，然后直接查看即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先用requests库模拟登陆学校的教务系统，然后再进入成绩查询的页面，得到该页面的html源码，用BeatufulSoup来解析页面，提取出每门课的学分和成绩用列表来储存，最后格式化输出，并将输出写入文件。<br>我把直接用函数来表示每个步骤，自我感觉思路比较清晰</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="查分小程序"><a href="#查分小程序" class="headerlink" title="查分小程序"></a>查分小程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup,element</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">'http://run.hbut.edu.cn/Account/LogOn'</span></span><br><span class="line">checkimg = <span class="string">'http://run.hbut.edu.cn/Account/GetValidateCode'</span></span><br><span class="line">StuGrade = <span class="string">'http://run.hbut.edu.cn/StuGrade/Index'</span></span><br><span class="line">g_20171 = <span class="string">'?SemesterName=20171&amp;SemesterNameStr=2017学年%20第一学期'</span></span><br><span class="line">g_20162 = <span class="string">'?SemesterName=20162&amp;SemesterNameStr=2016学年%20第二学期'</span></span><br><span class="line">g_20161 = <span class="string">'?SemesterName=20161&amp;SemesterNameStr=2016学年%20第一学期'</span></span><br><span class="line"></span><br><span class="line">file = open(<span class="string">'grade.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line">session  = requests.Session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Referer'</span> : <span class="string">'http://run.hbut.edu.cn/'</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取登陆验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetValidateCode</span><span class="params">()</span>:</span></span><br><span class="line">    checkcodecontent = session.get(checkimg,headers=headers)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'checkcode.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(checkcodecontent.content)</span><br><span class="line">    print(<span class="string">'验证码已写入到本地！'</span>)</span><br><span class="line">    os.startfile(<span class="string">"checkcode.jpg"</span>)</span><br><span class="line">    checkcode = input(<span class="string">"请输入验证码："</span>)</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'Role'</span>:<span class="string">'Student'</span>,</span><br><span class="line">        <span class="string">'UserName'</span>: input(<span class="string">'请输入账号：'</span>),</span><br><span class="line">        <span class="string">'Password'</span>: input(<span class="string">'请输入密码：'</span>),</span><br><span class="line">        <span class="string">'ValidateCode'</span>: checkcode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取课程成绩页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtmlText</span><span class="params">(SemesterName,payload)</span>:</span></span><br><span class="line">    respose = session.post(login_url,headers=headers,data=payload)</span><br><span class="line">    print(<span class="string">'服务器端返回码：'</span>,respose.status_code)</span><br><span class="line">    <span class="keyword">if</span> SemesterName <span class="keyword">is</span> <span class="string">'1'</span>:</span><br><span class="line">        SemesterName = g_20161</span><br><span class="line">    <span class="keyword">if</span> SemesterName <span class="keyword">is</span> <span class="string">'2'</span>:</span><br><span class="line">        SemesterName = g_20162</span><br><span class="line">    <span class="keyword">if</span> SemesterName <span class="keyword">is</span> <span class="string">'3'</span>:</span><br><span class="line">        SemesterName = g_20171</span><br><span class="line">    grade_url = StuGrade+SemesterName</span><br><span class="line">    stugrade = session.get(grade_url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> stugrade.text</span><br><span class="line">    </span><br><span class="line"><span class="comment">#提取各科成绩</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFromText</span><span class="params">(txt)</span>:</span></span><br><span class="line">    form = []</span><br><span class="line">    soup = BeautifulSoup(txt,<span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'table'</span>).children:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(tr,element.Tag):</span><br><span class="line">                tds = tr(<span class="string">'td'</span>)</span><br><span class="line">                Class = tds[<span class="number">1</span>].string       <span class="comment">#课程</span></span><br><span class="line">                Credit = tds[<span class="number">4</span>].string      <span class="comment">#学分</span></span><br><span class="line">                Grade = tds[<span class="number">5</span>].string       <span class="comment">#成绩</span></span><br><span class="line">                form.append([<span class="string">''</span>.join(Class.split()),<span class="string">''</span>.join(Credit.split()),<span class="string">''</span>.join(Grade.split())])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> form</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式输出各科成绩</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printgrade</span><span class="params">(ulist,num)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;0:&#123;3&#125;^25&#125;\t&#123;1:^10&#125;\t&#123;2:^10&#125;\n"</span></span><br><span class="line">    print(tplt.format(<span class="string">"课程"</span>,<span class="string">"学分"</span>,<span class="string">"成绩"</span>,chr(<span class="number">12288</span>)))</span><br><span class="line">    file.write(tplt.format(<span class="string">"课程"</span>,<span class="string">"学分"</span>,<span class="string">"成绩"</span>,chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line">        file.write(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = GetValidateCode()</span><br><span class="line">        print(<span class="string">'16学年第一学期： 1'</span>)</span><br><span class="line">        print(<span class="string">'16学年第二学期： 2'</span>)</span><br><span class="line">        print(<span class="string">'17学年第一学期： 3'</span>)</span><br><span class="line">        SenesterName = input(<span class="string">'请输入查询的学期：'</span>)</span><br><span class="line">        txt = getHtmlText(SenesterName,payload)</span><br><span class="line">        form = GetFromText(txt)</span><br><span class="line">        printgrade(form,len(form));</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        print(<span class="string">"Error"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="查课小程序"><a href="#查课小程序" class="headerlink" title="查课小程序"></a>查课小程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">'http://run.hbut.edu.cn/Account/LogOn'</span></span><br><span class="line">checkimg = <span class="string">'http://run.hbut.edu.cn/Account/GetValidateCode'</span></span><br><span class="line">Schedule = <span class="string">'http://run.hbut.edu.cn/ArrangeTask/MyselfSchedule'</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">'MyselfSchedule'</span>)</span><br><span class="line">session  = requests.Session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Referer'</span> : <span class="string">'http://run.hbut.edu.cn/'</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取登陆验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetValidateCode</span><span class="params">()</span>:</span></span><br><span class="line">    checkcodecontent = session.get(checkimg,headers=headers)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'checkcode.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(checkcodecontent.content)</span><br><span class="line">    print(<span class="string">'验证码已写入到本地！'</span>)</span><br><span class="line">    os.startfile(<span class="string">"checkcode.jpg"</span>)</span><br><span class="line">    checkcode = input(<span class="string">"请输入验证码："</span>)</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'Role'</span>:<span class="string">'Student'</span>,</span><br><span class="line">        <span class="string">'UserName'</span>: input(<span class="string">'请输入账号：'</span>),</span><br><span class="line">        <span class="string">'Password'</span>: input(<span class="string">'请输入密码：'</span>),</span><br><span class="line">        <span class="string">'ValidateCode'</span>: checkcode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取课程表网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtmlText</span><span class="params">(payload)</span>:</span></span><br><span class="line">    respose = session.post(login_url,headers=headers,data=payload)</span><br><span class="line">    print(<span class="string">'服务器端返回码：'</span>,respose.status_code)</span><br><span class="line">    work = session.get(Schedule,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> work.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取网页中的课程表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFormText</span><span class="params">(string)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(string,<span class="string">'html.parser'</span>)</span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'table'</span>).children:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            time = tr(<span class="string">'th'</span>)[<span class="number">0</span>].string</span><br><span class="line">            <span class="keyword">if</span> time==<span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            day1 = tr(<span class="string">'td'</span>)[<span class="number">0</span>].string</span><br><span class="line">            day2 = tr(<span class="string">'td'</span>)[<span class="number">1</span>].string</span><br><span class="line">            day3 = tr(<span class="string">'td'</span>)[<span class="number">2</span>].string</span><br><span class="line">            day4 = tr(<span class="string">'td'</span>)[<span class="number">3</span>].string</span><br><span class="line">            day5 = tr(<span class="string">'td'</span>)[<span class="number">4</span>].string</span><br><span class="line">            day6 = tr(<span class="string">'td'</span>)[<span class="number">5</span>].string</span><br><span class="line">            day7 = tr(<span class="string">'td'</span>)[<span class="number">6</span>].string</span><br><span class="line">            list.append([time,day1,day2,day3,day4,day5,day6,day7])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment">#将提取到的课程表写入excel表格中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WirteXls</span><span class="params">(list)</span>:</span></span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">1</span>,<span class="string">"星期一"</span>)</span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">2</span>,<span class="string">"星期二"</span>)</span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">3</span>,<span class="string">"星期三"</span>)</span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">4</span>,<span class="string">"星期四"</span>)</span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">5</span>,<span class="string">"星期五"</span>)</span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">6</span>,<span class="string">"星期六"</span>)</span><br><span class="line">    worksheet.write(<span class="number">0</span>,<span class="number">7</span>,<span class="string">"星期日"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        u = list[i]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            worksheet.write(i+<span class="number">1</span>,k,u[k])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = GetValidateCode()</span><br><span class="line">        string = getHtmlText(payload)</span><br><span class="line">        string = string.replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">        list = getFormText(string)</span><br><span class="line">        WirteXls(list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        workbook.save(<span class="string">'MyselfSchedule.xls'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先贴下github&lt;a href=&quot;https://github.com/onlyless/login_hbut&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址&lt;/a&gt; (如果觉得这个程序好，求个star)&lt;/p&gt;
&lt;p&gt;运行该小程序需安装req
      
    
    </summary>
    
      <category term="python" scheme="https://www.djangoz.com/categories/python/"/>
    
    
      <category term="小程序" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>统计文本中单词频率</title>
    <link href="https://www.djangoz.com/2017/10/18/Vocabulary_Statistics/"/>
    <id>https://www.djangoz.com/2017/10/18/Vocabulary_Statistics/</id>
    <published>2017-10-17T16:00:00.000Z</published>
    <updated>2018-06-10T13:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>想起高中的时候英语一直很差，后来发现背英语中出现频率最高的单词是一种很高效的学习方法，于是现在写出来一个小程序</p><ul><li>更新<br>最近数据结构课程设计，老师给的题目里面有个就是分析文本，统计单词频率，用c++来写,所以就增加c++版本的，源码在github里已更新,因为是课程设计，就没用c++的map库来写，用自己定义的红黑树来实现的</li></ul><p>github<a href="https://github.com/onlyless/Vocabulary-Statistics" target="_blank" rel="noopener">项目地址</a>(如果觉得这个程序好，求个star)<br>这个小程序可以统计文件input.txt文本中所有英文单词的词频（由高到低排序），并给出每个单词的翻译<br>这个程序有两种方法，第一种用goole-cloud库，收费的，不过运行时间快一些，第二种模拟网页请求，时间略长,不能大量翻译.<br>本程序用的两种方法都可以运行，第一种在本机运行后，超出了免费翻译次数，于是就用的第二种，要用第一种的话，把源代码中注释的代码取消注释即可，再把第二种的注释就可以了</p><h3 id="一-运行前需要安装google-cloud库-并安装Google-Cloud-SDK"><a href="#一-运行前需要安装google-cloud库-并安装Google-Cloud-SDK" class="headerlink" title="一.运行前需要安装google-cloud库,并安装Google Cloud SDK"></a>一.运行前需要安装google-cloud库,并安装Google Cloud SDK</h3><h4 id="1-安装相关模块"><a href="#1-安装相关模块" class="headerlink" title="1.安装相关模块"></a>1.安装相关模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade google-cloud-translate</span><br></pre></td></tr></table></figure><h4 id="2-调用api进行翻译之前，需要安装相关证书"><a href="#2-调用api进行翻译之前，需要安装相关证书" class="headerlink" title="2.调用api进行翻译之前，需要安装相关证书"></a>2.调用api进行翻译之前，需要安装相关证书</h4><p>安装  <a href="https://cloud.google.com/sdk/" target="_blank" rel="noopener">Google Cloud SDK</a><br>因为在本地上运行，使用的第一种方式，安装之后会有自动弹出验证邮箱的界面，如果没有在Google cloud sdk shell  运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud auth application-default login</span><br></pre></td></tr></table></figure></p><h3 id="二-使用urllib取googletranslate"><a href="#二-使用urllib取googletranslate" class="headerlink" title="二.使用urllib取googletranslate"></a>二.使用urllib取googletranslate</h3><p>模拟一个头部，请求到translate.google.com去，然后解析出翻译文本</p><h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><p>把将要统计的文本放入Input.txt文件中，直接运行即可<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python word.py</span><br></pre></td></tr></table></figure></p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># from google.cloud import translate  </span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># translate_client = translate.Client()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># language = 'zh_CN'  #将要翻译的语言</span></span><br><span class="line">length = <span class="number">4</span>      <span class="comment">#提选出小于此长度的单词</span></span><br><span class="line"></span><br><span class="line">input = open(<span class="string">"words.txt"</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">output = open(<span class="string">'ouput.txt'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">typ = sys.getfilesystemencoding()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">(querystr, to_l=<span class="string">"zh"</span>, from_l=<span class="string">"en"</span>)</span>:</span></span><br><span class="line">    C_agent = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span>&#125;</span><br><span class="line">    flag = <span class="string">'class="t0"&gt;'</span></span><br><span class="line">    tarurl = <span class="string">"http://translate.google.com/m?hl=%s&amp;sl=%s&amp;q=%s \</span></span><br><span class="line"><span class="string">        "</span> % (to_l, from_l, querystr.replace(<span class="string">" "</span>, <span class="string">"+"</span>))</span><br><span class="line">    request = urllib.request.Request(tarurl, headers=C_agent)</span><br><span class="line">    page = str(urllib.request.urlopen(request).read().decode(typ))</span><br><span class="line">    target = page[page.find(flag) + len(flag):]</span><br><span class="line">    target = target.split(<span class="string">"&lt;"</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    all_word = input.read()</span><br><span class="line">    l = re.split(<span class="string">r'[^A-Za-z]+'</span>,all_word)</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        i = i.lower()</span><br><span class="line">        <span class="keyword">if</span> d.get(i)==<span class="keyword">None</span>:</span><br><span class="line">            d[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d[i] = d[i] +<span class="number">1</span></span><br><span class="line">    ju = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> sorted(d,key=d.get,reverse=<span class="keyword">True</span>):</span><br><span class="line">        <span class="keyword">if</span> len(word)&lt;length:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># translation = translate_client.translate(word,target_language=language)  </span></span><br><span class="line">        <span class="comment"># tran = translation['translatedText']</span></span><br><span class="line">        tran = translate(word)</span><br><span class="line">        string = <span class="string">"%-18s%-10s%-7d\t"</span>%(word,tran,d[word])</span><br><span class="line">        <span class="comment"># string = "%-20s%-7d\t" %(word,d[word])</span></span><br><span class="line">        ju += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ju%<span class="number">8</span>==<span class="number">0</span>:</span><br><span class="line">            string += <span class="string">'\n'</span></span><br><span class="line">        output.write(string)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    input.close()</span><br><span class="line">    output.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想起高中的时候英语一直很差，后来发现背英语中出现频率最高的单词是一种很高效的学习方法，于是现在写出来一个小程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新&lt;br&gt;最近数据结构课程设计，老师给的题目里面有个就是分析文本，统计单词频率，用c++来写,所以就增加c++版本的，源码在githu
      
    
    </summary>
    
      <category term="python" scheme="https://www.djangoz.com/categories/python/"/>
    
    
      <category term="小程序" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>识别括号优先级的简易计算器</title>
    <link href="https://www.djangoz.com/2017/09/30/simple_calculator/"/>
    <id>https://www.djangoz.com/2017/09/30/simple_calculator/</id>
    <published>2017-09-29T16:00:00.000Z</published>
    <updated>2018-06-17T04:26:05.412Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/onlyless/Calculator" target="_blank" rel="noopener">github项目地址</a><br>该计算器用java实现<br>更新：现已支持多位数的输入（利用正则表达式提取输入的数值，再压入数值栈中）<br>GUI用swing实现，可识别括号优先级是用了双栈，一个栈存取操作符，一个栈存取数据<br>界面巨丑，待我学到更多后来更新此计算器。<br>主要是拿来练手的（这是第一个自己用代码实现GUI的小程序！！！）<br>主界面:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="CalculatorFrame-java"><a href="#CalculatorFrame-java" class="headerlink" title="CalculatorFrame.java"></a>CalculatorFrame.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算器框架*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JFrame frame;</span><br><span class="line">    <span class="keyword">private</span> JTextField number;</span><br><span class="line">    <span class="keyword">private</span> JPanel panel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String expression =<span class="string">""</span>;  <span class="comment">//输入的数据转划为字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculatorFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        frame = <span class="keyword">new</span> JFrame(<span class="string">"Calculator"</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        frame.setSize(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        number = <span class="keyword">new</span> JTextField();</span><br><span class="line">        number.setEditable(<span class="keyword">false</span>);</span><br><span class="line">        frame.add(number,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">6</span>,<span class="number">3</span>));</span><br><span class="line">        frame.add(panel,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            addButton(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addButton(<span class="string">"+"</span>);</span><br><span class="line">        addButton(<span class="string">"0"</span>);</span><br><span class="line">        addButton(<span class="string">"-"</span>);</span><br><span class="line">        addButton(<span class="string">"*"</span>);</span><br><span class="line">        addButton(<span class="string">"C"</span>);         <span class="comment">//按钮C的作用是清空整个输入</span></span><br><span class="line">        addButton(<span class="string">"/"</span>);</span><br><span class="line">        addButton(<span class="string">"("</span>);</span><br><span class="line">        addButton(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        JButton equal = <span class="keyword">new</span> JButton(<span class="string">"="</span>);</span><br><span class="line">        equal.setActionCommand(<span class="string">"="</span>);</span><br><span class="line">        equal.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">                number.setText(<span class="string">""</span>+<span class="keyword">new</span> Calculate().calculating(expression)); <span class="comment">//显示计算得到的结果</span></span><br><span class="line">                expression = <span class="string">""</span>;            <span class="comment">//  计算后整个输入清空</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(equal);</span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);      <span class="comment">//设置窗口大小不可改变</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*当不为输入不为“C”和“=”时，将输入转化为字符串,为“C”时清空输入*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(String name )</span></span>&#123;</span><br><span class="line">        JButton temp = <span class="keyword">new</span> JButton(name);</span><br><span class="line">        temp.setActionCommand(name);</span><br><span class="line">        temp.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="string">"C"</span>.equals(name))&#123;</span><br><span class="line">                expression += name;</span><br><span class="line">                number.setText(expression);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                expression=<span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calculate-java"><a href="#Calculate-java" class="headerlink" title="Calculate.java"></a>Calculate.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取一个字符串，然后在两个栈中计算表达式的值,这样可以判断（）的优先级*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;&gt;();   <span class="comment">//操作栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Double&gt; nums = <span class="keyword">new</span> Stack&lt;&gt;();  <span class="comment">//数据栈</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String op = ops.pop();</span><br><span class="line">        <span class="keyword">if</span> (op.equals(<span class="string">"+"</span>))</span><br><span class="line">            nums.push(nums.pop() + nums.pop());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>))</span><br><span class="line">            nums.push(-(nums.pop() - nums.pop()));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>))</span><br><span class="line">            nums.push(nums.pop() * nums.pop());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>))</span><br><span class="line">            nums.push(nums.pop() / nums.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculating</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        String[] strs = s.split(<span class="string">"[^0-9]+"</span>);     <span class="comment">//利用正则表达式提取输入中的数值</span></span><br><span class="line">        <span class="keyword">for</span>(String str:strs)&#123;</span><br><span class="line">            nums.push(Double.parseDouble(str));     <span class="comment">//将提取的数值压到栈中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (s.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                    ops.push(<span class="string">"+"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    ops.push(<span class="string">"-"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                    ops.push(<span class="string">"*"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                    ops.push(<span class="string">"/"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>: &#123;</span><br><span class="line">                    calculate();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!ops.empty()) &#123;</span><br><span class="line">            calculate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.pop();      <span class="comment">//返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="run-java"><a href="#run-java" class="headerlink" title="run.java"></a>run.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> CalculatorFrame();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/onlyless/Calculator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github项目地址&lt;/a&gt;&lt;br&gt;该计算器用java实现&lt;br&gt;更新：现已支持多位数的输入（利用正则表达式提取输
      
    
    </summary>
    
      <category term="java" scheme="https://www.djangoz.com/categories/java/"/>
    
    
      <category term="小程序" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows cmd使用常用bash命令</title>
    <link href="https://www.djangoz.com/2017/09/28/windows_use_bash/"/>
    <id>https://www.djangoz.com/2017/09/28/windows_use_bash/</id>
    <published>2017-09-27T16:00:00.000Z</published>
    <updated>2018-06-10T13:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>windows的cmd命令用起来不顺手，Linux系的bash命令酸爽多了。<br>首先下载<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>，一般来说都有这个软件，有的话忽略。<br>然后找到git的安装路径，我电脑git安装在D盘的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>然后进入usr目录，再进入bin目录，把该目录链接添加一个环境变量。保存就可以了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>然后就可以愉快的使用bash命令了，瞬间酸爽许多。<br>ls rm mkdir等等都可以完美使用.<br>** 最主要的是可以使用vim，让cmd瞬间强大了许多,有木有!!!<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows的cmd命令用起来不顺手，Linux系的bash命令酸爽多了。&lt;br&gt;首先下载&lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/a&gt;，一般来说都有这个软
      
    
    </summary>
    
    
      <category term="小技巧" scheme="https://www.djangoz.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>并查集(Union-Find)算法介绍</title>
    <link href="https://www.djangoz.com/2017/09/12/union_find/"/>
    <id>https://www.djangoz.com/2017/09/12/union_find/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2018-06-10T14:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在看完<a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="noopener">algorithms-part1</a>第一周的Union-Find视频和<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法(第四版)</a> 一书的Section 1.5后，本来也打算写一些笔记的，但是发现有篇文章写得很好，就转载过来了。<br>先贴上自己学习过程中写的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import edu.princeton.cs.introcs.StdIn;</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] sz;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">sz = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">sz[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (i != id[i]) &#123;</span><br><span class="line">id[i] = id[id[i]];<span class="comment">//路径压缩</span></span><br><span class="line">i = id[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = find(p);</span><br><span class="line"><span class="keyword">int</span> j = find(q);</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;<span class="comment">//对树的高度加权，总是选择讲小树连接到大树</span></span><br><span class="line">id[i] = j;</span><br><span class="line">sz[j] += sz[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">id[j] = i;</span><br><span class="line">sz[i] += sz[j];</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// int N = StdIn.readInt();</span></span><br><span class="line"><span class="keyword">int</span> N = in.nextInt();</span><br><span class="line">UnionFind uFind = <span class="keyword">new</span> UnionFind(N);</span><br><span class="line"><span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line"><span class="comment">// int p = StdIn.readInt();</span></span><br><span class="line"><span class="comment">// int q = StdIn.readInt();</span></span><br><span class="line"><span class="keyword">int</span> p = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> q = in.nextInt();</span><br><span class="line"><span class="keyword">if</span> (uFind.connected(p, q))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">uFind.union(p, q);</span><br><span class="line">System.out.println(p + <span class="string">" "</span> + q);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(uFind.count + <span class="string">"components"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本文主要介绍解决动态连通性一类问题的一种算法，使用到了一种叫做并查集的数据结构，称为Union-Find。更多的信息可以参考<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法(第四版)</a> 一书的Section 1.5，实际上本文也就是基于它的一篇读后感吧。原文中更多的是给出一些结论，我尝试给出一些思路上的过程，即为什么要使用这个方法，而不是别的什么方法。我觉得这个可能更加有意义一些，相比于记下一些结论。</p><h2 id="关于动态连通性"><a href="#关于动态连通性" class="headerlink" title="关于动态连通性"></a>关于动态连通性</h2><p>我们看一张图来了解一下什么是动态连通性：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339478916_8193.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>假设我们输入了一组整数对，即上图中的(4, 3) (3, 8)等等，每对整数代表这两个points/sites是连通的。那么随着数据的不断输入，整个图的连通性也会发生变化，从上图中可以很清晰的发现这一点。同时，对于已经处于连通状态的points/sites，直接忽略，比如上图中的(8, 9)。</p><h3 id="动态连通性的应用场景："><a href="#动态连通性的应用场景：" class="headerlink" title="动态连通性的应用场景："></a>动态连通性的应用场景：</h3><ul><li>网络连接判断：<br>如果每个pair中的两个整数分别代表一个网络节点，那么该pair就是用来表示这两个节点是需要连通的。那么为所有的pairs建立了动态连通图后，就能够尽可能少的减少布线的需要，因为已经连通的两个节点会被直接忽略掉。</li><li>变量名等同性(类似于指针的概念)：<br>在程序中，可以声明多个引用来指向同一对象，这个时候就可以通过为程序中声明的引用和实际对象建立动态连通图来判断哪些引用实际上是指向同一对象。</li></ul><h3 id="对问题建模："><a href="#对问题建模：" class="headerlink" title="对问题建模："></a>对问题建模：</h3><p>在对问题进行建模的时候，我们应该尽量想清楚需要解决的问题是什么。因为模型中选择的数据结构和算法显然会根据问题的不同而不同，就动态连通性这个场景而言，我们需要解决的问题可能是：</p><ul><li>给出两个节点，判断它们是否连通，如果连通，不需要给出具体的路径</li><li>给出两个节点，判断它们是否连通，如果连通，需要给出具体的路径</li></ul><p>就上面两种问题而言，虽然只有是否能够给出具体路径的区别，但是这个区别导致了选择算法的不同，本文主要介绍的是第一种情况，即不需要给出具体路径的Union-Find算法，而第二种情况可以使用基于DFS的算法。</p><h3 id="建模思路："><a href="#建模思路：" class="headerlink" title="建模思路："></a>建模思路：</h3><p>最简单而直观的假设是，对于连通的所有节点，我们可以认为它们属于一个组，因此不连通的节点必然就属于不同的组。随着Pair的输入，我们需要首先判断输入的两个节点是否连通。如何判断呢？按照上面的假设，我们可以通过判断它们属于的组，然后看看这两个组是否相同，如果相同，那么这两个节点连通，反之不连通。为简单起见，我们将所有的节点以整数表示，即对N个节点使用0到N-1的整数表示。而在处理输入的Pair之前，每个节点必然都是孤立的，即他们分属于不同的组，可以使用数组来表示这一层关系，数组的index是节点的整数表示，而相应的值就是该节点的组号了。该数组可以初始化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)  </span><br><span class="line">    id[i] = i;</span><br></pre></td></tr></table></figure><p>即对于节点i，它的组号也是i。</p><p>初始化完毕之后，对该动态连通图有几种可能的操作：</p><ul><li>查询节点属于的组<br>数组对应位置的值即为组号</li><li>判断两个节点是否属于同一个组<br>分别得到两个节点的组号，然后判断组号是否相等</li><li>连接两个节点，使之属于同一个组<br>分别得到两个节点的组号，组号相同时操作结束，不同时，将其中的一个节点的组号换成另一个节点的组号<br>获取组的数目</li></ul><p>初始化为节点的数目，然后每次成功连接两个节点之后，递减1</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>我们可以设计相应的API：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339479136_7058.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>注意其中使用整数来表示节点，如果需要使用其他的数据类型表示节点，比如使用字符串，那么可以用哈希表来进行映射，即将String映射成这里需要的Integer类型。</p><p>分析以上的API，方法connected和union都依赖于find，connected对两个参数调用两次find方法，而union在真正执行union之前也需要判断是否连通，这又是两次调用find方法。因此我们需要把find方法的实现设计的尽可能的高效。所以就有了下面的Quick-Find实现。</p><h2 id="Quick-Find-算法："><a href="#Quick-Find-算法：" class="headerlink" title="Quick-Find 算法："></a>Quick-Find 算法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id; <span class="comment">// access to component id (site indexed)  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// number of components  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="comment">// Initialize component id array.  </span></span><br><span class="line">        count = N;  </span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  </span><br><span class="line">            id[i] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> count; &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> find(p) == find(q); &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> id[p]; &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="comment">// 获得p和q的组号  </span></span><br><span class="line">        <span class="keyword">int</span> pID = find(p);  </span><br><span class="line">        <span class="keyword">int</span> qID = find(q);  </span><br><span class="line">        <span class="comment">// 如果两个组号相等，直接返回  </span></span><br><span class="line">        <span class="keyword">if</span> (pID == qID) <span class="keyword">return</span>;  </span><br><span class="line">        <span class="comment">// 遍历一次，改变组号使他们属于一个组  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)  </span><br><span class="line">            <span class="keyword">if</span> (id[i] == pID) id[i] = qID;  </span><br><span class="line">        count--;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子，比如输入的Pair是(5， 9)，那么首先通过find方法发现它们的组号并不相同，然后在union的时候通过一次遍历，将组号1都改成8。当然，由8改成1也是可以的，保证操作时都使用一种规则就行。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339479271_3352.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>上述代码的find方法十分高效，因为仅仅需要一次数组读取操作就能够找到该节点的组号，但是问题随之而来，对于需要添加新路径的情况，就涉及到对于组号的修改，因为并不能确定哪些节点的组号需要被修改，因此就必须对整个数组进行遍历，找到需要修改的节点，逐一修改，这一下每次添加新路径带来的复杂度就是线性关系了，如果要添加的新路径的数量是M，节点数量是N，那么最后的时间复杂度就是MN，显然是一个平方阶的复杂度，对于大规模的数据而言，平方阶的算法是存在问题的，这种情况下，每次添加新路径就是“牵一发而动全身”，想要解决这个问题，关键就是要提高union方法的效率，让它不再需要遍历整个数组。</p><h2 id="Quick-Union-算法："><a href="#Quick-Union-算法：" class="headerlink" title="Quick-Union 算法："></a>Quick-Union 算法：</h2><p>考虑一下，为什么以上的解法会造成“牵一发而动全身”？因为每个节点所属的组号都是单独记录，各自为政的，没有将它们以更好的方式组织起来，当涉及到修改的时候，除了逐一通知、修改，别无他法。所以现在的问题就变成了，如何将节点以更好的方式组织起来，组织的方式有很多种，但是最直观的还是将组号相同的节点组织在一起，想想所学的数据结构，什么样子的数据结构能够将一些节点给组织起来？常见的就是链表，图，树，什么的了。但是哪种结构对于查找和修改的效率最高？毫无疑问是树，因此考虑如何将节点和组的关系以树的形式表现出来。</p><p>如果不改变底层数据结构，即不改变使用数组的表示方法的话。可以采用parent-link的方式将节点组织起来，举例而言，id[p]的值就是p节点的父节点的序号，如果p是树根的话，id[p]的值就是p，因此最后经过若干次查找，一个节点总是能够找到它的根节点，即满足id[root] = root的节点也就是组的根节点了，然后就可以使用根节点的序号来表示组号。所以在处理一个pair的时候，将首先找到pair中每一个节点的组号(即它们所在树的根节点的序号)，如果属于不同的组的话，就将其中一个根节点的父节点设置为另外一个根节点，相当于将一颗独立的树编程另一颗独立的树的子树。直观的过程如下图所示。但是这个时候又引入了问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339479431_6633.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在实现上，和之前的Quick-Find只有find和union两个方法有所不同：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// 寻找p节点所在组的根节点，根节点具有性质id[root] = root  </span></span><br><span class="line">    <span class="keyword">while</span> (p != id[p]) p = id[p];  </span><br><span class="line">    <span class="keyword">return</span> p;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// Give p and q the same root.  </span></span><br><span class="line">    <span class="keyword">int</span> pRoot = find(p);  </span><br><span class="line">    <span class="keyword">int</span> qRoot = find(q);  </span><br><span class="line">    <span class="keyword">if</span> (pRoot == qRoot)   </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    id[pRoot] = qRoot;    <span class="comment">// 将一颗树(即一个组)变成另外一课树(即一个组)的子树  </span></span><br><span class="line">    count--;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>树这种数据结构容易出现极端情况，因为在建树的过程中，树的最终形态严重依赖于输入数据本身的性质，比如数据是否排序，是否随机分布等等。比如在输入数据是有序的情况下，构造的BST会退化成一个链表。在我们这个问题中，也是会出现的极端情况的，如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339479497_8053.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>为了克服这个问题，BST可以演变成为红黑树或者AVL树等等。</p><p>然而，在我们考虑的这个应用场景中，每对节点之间是不具备可比性的。因此需要想其它的办法。在没有什么思路的时候，多看看相应的代码可能会有一些启发，考虑一下Quick-Union算法中的union方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// Give p and q the same root.  </span></span><br><span class="line">    <span class="keyword">int</span> pRoot = find(p);  </span><br><span class="line">    <span class="keyword">int</span> qRoot = find(q);  </span><br><span class="line">    <span class="keyword">if</span> (pRoot == qRoot)   </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    id[pRoot] = qRoot;  <span class="comment">// 将一颗树(即一个组)变成另外一课树(即一个组)的子树  </span></span><br><span class="line">    count--;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面 id[pRoot] = qRoot 这行代码看上去似乎不太对劲。因为这也属于一种“硬编码”，这样实现是基于一个约定，即p所在的树总是会被作为q所在树的子树，从而实现两颗独立的树的融合。那么这样的约定是不是总是合理的呢？显然不是，比如p所在的树的规模比q所在的树的规模大的多时，p和q结合之后形成的树就是十分不和谐的一头轻一头重的”畸形树“了。<br>所以我们应该考虑树的大小，然后再来决定到底是调用：<br>id[pRoot] = qRoot 或者是 id[qRoot] = pRoot</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339479587_5986.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>即总是size小的树作为子树和size大的树进行合并。这样就能够尽量的保持整棵树的平衡。</p><p>所以现在的问题就变成了：树的大小该如何确定？<br>我们回到最初的情形，即每个节点最一开始都是属于一个独立的组，通过下面的代码进行初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  </span><br><span class="line">    id[i] = i;    <span class="comment">// 每个节点的组号就是该节点的序号</span></span><br></pre></td></tr></table></figure><p>以此类推，在初始情况下，每个组的大小都是1，因为只含有一个节点，所以我们可以使用额外的一个数组来维护每个组的大小，对该数组的初始化也很直观：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = find(p);  </span><br><span class="line">    <span class="keyword">int</span> j = find(q);  </span><br><span class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;  </span><br><span class="line">    <span class="comment">// 将小树作为大树的子树  </span></span><br><span class="line">    <span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123; id[i] = j; sz[j] += sz[i]; &#125;  </span><br><span class="line">    <span class="keyword">else</span> &#123; id[j] = i; sz[i] += sz[j]; &#125;  </span><br><span class="line">    count--;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Quick-Union 和 Weighted Quick-Union 的比较：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/1339479677_7171.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>可以发现，通过sz数组决定如何对两棵树进行合并之后，最后得到的树的高度大幅度减小了。这是十分有意义的，因为在Quick-Union算法中的任何操作，都不可避免的需要调用find方法，而该方法的执行效率依赖于树的高度。树的高度减小了，find方法的效率就增加了，从而也就增加了整个Quick-Union算法的效率。</p><p>上图其实还可以给我们一些启示，即对于Quick-Union算法而言，节点组织的理想情况应该是一颗十分扁平的树，所有的孩子节点应该都在height为1的地方，即所有的孩子都直接连接到根节点。这样的组织结构能够保证find操作的最高效率。</p><p>那么如何构造这种理想结构呢？<br>在find方法的执行过程中，不是需要进行一个while循环找到根节点嘛？如果保存所有路过的中间节点到一个数组中，然后在while循环结束之后，将这些中间节点的父节点指向根节点，不就行了么？但是这个方法也有问题，因为find操作的频繁性，会造成频繁生成中间节点数组，相应的分配销毁的时间自然就上升了。那么有没有更好的方法呢？还是有的，即将节点的父节点指向该节点的爷爷节点，这一点很巧妙，十分方便且有效，相当于在寻找根节点的同时，对路径进行了压缩，使整个树结构扁平化。相应的实现如下，实际上只需要添加一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">while</span> (p != id[p])  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// 将p节点的父节点设置为它的爷爷节点  </span></span><br><span class="line">        id[p] = id[id[p]];  </span><br><span class="line">        p = id[p];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> p;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，动态连通性相关的Union-Find算法基本上就介绍完了，从容易想到的Quick-Find到相对复杂但是更加高效的Quick-Union，然后到对Quick-Union的几项改进，让我们的算法的效率不断的提高。<br>这几种算法的时间复杂度如下所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./images/20170912215243.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>对大规模数据进行处理，使用平方阶的算法是不合适的，比如简单直观的Quick-Find算法，通过发现问题的更多特点，找到合适的数据结构，然后有针对性的进行改进，得到了Quick-Union算法及其多种改进算法，最终使得算法的复杂度降低到了近乎线性复杂度。</p><p>如果需要的功能不仅仅是检测两个节点是否连通，还需要在连通时得到具体的路径，那么就需要用到别的算法了，比如DFS或者BFS。</p><p>该文章转载于<a href="http://blog.csdn.net/dm_vincent/article/details/7655764" target="_blank" rel="noopener">dm_vincent</a>的专栏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在看完&lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;algorithms-part1&lt;/a&gt;第一周的Union-Find视频和&lt;a href=
      
    
    </summary>
    
      <category term="java" scheme="https://www.djangoz.com/categories/java/"/>
    
    
      <category term="算法与数据结构" scheme="https://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java实现简易的queue</title>
    <link href="https://www.djangoz.com/2017/09/09/queue_in-java/"/>
    <id>https://www.djangoz.com/2017/09/09/queue_in-java/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2018-06-06T15:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用java实现queue模板"><a href="#用java实现queue模板" class="headerlink" title="用java实现queue模板"></a>用java实现queue模板</h1><p>队列是一种基于先进先出（FIFO)策略的线性数据结构。<br>这就像在学校食堂买饭排队一样，排在前面的人先打饭，后面的人后打饭。<br>该模板只有6个方法，分别是isEmpty(),size(),front(),back(),pop(),push(T).<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">queue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node first;</span><br><span class="line"><span class="keyword">private</span> Node last;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.first==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="comment">//队列的大小</span></span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item T)</span></span>&#123;<span class="comment">//向队列添加元素</span></span><br><span class="line">Node temp = last;</span><br><span class="line">last = <span class="keyword">new</span> Node();</span><br><span class="line">last.item = T;</span><br><span class="line">last.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())</span><br><span class="line">first = last;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp.next = last;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;<span class="comment">//弹出第一个元素，并返回第一个元素</span></span><br><span class="line">Node temp = first;</span><br><span class="line">first = first.next;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) </span><br><span class="line">last=<span class="keyword">null</span>;</span><br><span class="line">N--;</span><br><span class="line"><span class="keyword">return</span> temp.item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">front</span><span class="params">()</span></span>&#123;<span class="comment">//访问队列第一个元素</span></span><br><span class="line"><span class="keyword">return</span> first.item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">back</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//访问队列最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">queue&lt;String&gt; sb = <span class="keyword">new</span> queue&lt;String&gt;();</span><br><span class="line">sb.push(<span class="string">"hi"</span>);</span><br><span class="line"><span class="keyword">if</span>(sb.isEmpty())</span><br><span class="line">System.out.println(<span class="string">"isEmpty!"</span>);</span><br><span class="line"><span class="keyword">else</span> System.out.println(<span class="string">"NotEmpty!"</span>);</span><br><span class="line">sb.push(<span class="string">"hello"</span>);</span><br><span class="line">sb.push(<span class="string">"world"</span>);</span><br><span class="line">System.out.println(sb.front());</span><br><span class="line">System.out.println(sb.pop());</span><br><span class="line">System.out.println(sb.back());</span><br><span class="line">System.out.println(sb.pop());</span><br><span class="line">System.out.println(sb.pop());</span><br><span class="line"><span class="keyword">if</span>(sb.isEmpty())</span><br><span class="line">System.out.println(<span class="string">"isEmpty!"</span>);</span><br><span class="line"><span class="keyword">else</span> System.out.println(<span class="string">"NotEmpty!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该程序输入为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NotEmpty!</span><br><span class="line">hi</span><br><span class="line">hi</span><br><span class="line">world</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">NotEmpty!</span><br></pre></td></tr></table></figure></p><p>部分实现参考于<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法(第四版)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用java实现queue模板&quot;&gt;&lt;a href=&quot;#用java实现queue模板&quot; class=&quot;headerlink&quot; title=&quot;用java实现queue模板&quot;&gt;&lt;/a&gt;用java实现queue模板&lt;/h1&gt;&lt;p&gt;队列是一种基于先进先出（FIFO)策略的线性
      
    
    </summary>
    
      <category term="java" scheme="https://www.djangoz.com/categories/java/"/>
    
    
      <category term="算法与数据结构" scheme="https://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java实现简易的stack</title>
    <link href="https://www.djangoz.com/2017/09/09/stack_in_java/"/>
    <id>https://www.djangoz.com/2017/09/09/stack_in_java/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2018-06-06T15:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用java实现stack模板"><a href="#用java实现stack模板" class="headerlink" title="用java实现stack模板"></a>用java实现stack模板</h1><p>栈是一种基于后进先出（LIFO)策略的线性数据结构。<br>这就像手枪弹夹一样，先填进去的子弹都打出，后填进去的子弹后打出。<br>该模板只有5个方法，分别是isEmpty(),size(),top(),pop(),push(T).<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node first;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">return</span> first ==<span class="keyword">null</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123; <span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;                   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>&#123;                    <span class="comment">//添加元素</span></span><br><span class="line">Node oldfirst = first;</span><br><span class="line">first = <span class="keyword">new</span> Node();</span><br><span class="line">first.item = item;</span><br><span class="line">first.next = oldfirst;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;                              <span class="comment">//弹出元素</span></span><br><span class="line">Item item = first.item;</span><br><span class="line">first = first.next;</span><br><span class="line">N--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">top</span><span class="params">()</span></span>&#123;<span class="comment">//访问栈顶元素</span></span><br><span class="line"><span class="keyword">return</span> first.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">stack&lt;Integer&gt; te = <span class="keyword">new</span> stack&lt;Integer&gt;();</span><br><span class="line">te.push(<span class="number">19</span>);</span><br><span class="line"><span class="keyword">if</span>(te.isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"isEmpty!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"Not Empty!"</span>);</span><br><span class="line">te.push(<span class="number">20</span>);</span><br><span class="line">System.out.println(te.pop());</span><br><span class="line">System.out.println(te.top());</span><br><span class="line">System.out.println(te.pop());</span><br><span class="line"><span class="keyword">if</span>(te.isEmpty())&#123;</span><br><span class="line">System.out.println(<span class="string">"isEmpty!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"Not Empty!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该程序输入为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Not Empty!</span><br><span class="line">20</span><br><span class="line">19</span><br><span class="line">19</span><br><span class="line">isEmpty!</span><br></pre></td></tr></table></figure></p><p>部分实现参考于<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法(第四版)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用java实现stack模板&quot;&gt;&lt;a href=&quot;#用java实现stack模板&quot; class=&quot;headerlink&quot; title=&quot;用java实现stack模板&quot;&gt;&lt;/a&gt;用java实现stack模板&lt;/h1&gt;&lt;p&gt;栈是一种基于后进先出（LIFO)策略的线性数
      
    
    </summary>
    
      <category term="java" scheme="https://www.djangoz.com/categories/java/"/>
    
    
      <category term="算法与数据结构" scheme="https://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>windows下访问linux分区文件</title>
    <link href="https://www.djangoz.com/2017/08/18/windows_to-linux/"/>
    <id>https://www.djangoz.com/2017/08/18/windows_to-linux/</id>
    <published>2017-08-18T03:27:50.000Z</published>
    <updated>2017-08-24T14:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/projects/ext2fsd/files/" target="_blank" rel="noopener">Ext2Fsd Project</a>是Windows下的应用程序，可以在windows下访问ext2/ext3/ext4文件系统，可以设置编码，分配盘符，更可以在windows下读写，使用性能好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/ext2fsd/files/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ext2Fsd Project&lt;/a&gt;是Windows下的应用程序，可以在windows下访问ex
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.djangoz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>更换主题</title>
    <link href="https://www.djangoz.com/2017/08/17/change_theme/"/>
    <id>https://www.djangoz.com/2017/08/17/change_theme/</id>
    <published>2017-08-17T10:10:16.000Z</published>
    <updated>2018-06-11T06:27:07.797Z</updated>
    
    <content type="html"><![CDATA[<p>爱折腾的我又把原来网站换了框架，<br>把jekyll换成了hexo，<br>感觉hexo支持的主题看起来美观多了<br>该主题来自<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;爱折腾的我又把原来网站换了框架，&lt;br&gt;把jekyll换成了hexo，&lt;br&gt;感觉hexo支持的主题看起来美观多了&lt;br&gt;该主题来自&lt;a href=&quot;https://github.com/yscoder/hexo-theme-indigo&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="闲言碎语" scheme="https://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>在Linux的环境安装shadowsocksR客户端</title>
    <link href="https://www.djangoz.com/2017/08/16/linux_setup_ssr/"/>
    <id>https://www.djangoz.com/2017/08/16/linux_setup_ssr/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2018-06-06T15:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>ssr相比于ss更加稳定，推荐安装ssr<br>之前在网上找到很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用<br>安装以后可以通过ssr启动或者ssr配置命令运行ssr<br>使用root用户登录，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> wget --no-check-certificate https://www.djangoz.com/ssr </span><br><span class="line">wget https://onlyless.github.io/ssr</span><br><span class="line">sudo mv ssr /usr/local/bin</span><br><span class="line">sudo chmod 766 /usr/local/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure><p>SSR的配置就不说明了，很简单的</p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><h2 id="该脚本会运行git的命令，所以前提先安装的git"><a href="#该脚本会运行git的命令，所以前提先安装的git" class="headerlink" title="该脚本会运行git的命令，所以前提先安装的git"></a>该脚本会运行git的命令，所以前提先安装的git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>里面直接添加要运行的命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh -e</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> rc.local</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This script is executed at the end of each multiuser runlevel.</span><br><span class="line"><span class="meta">#</span> Make sure that the script will "exit 0" on success or any other</span><br><span class="line"><span class="meta">#</span> value on error.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> In order to enable or disable this script just change the execution</span><br><span class="line"><span class="meta">#</span> bits.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> By default this script does nothing.</span><br><span class="line"></span><br><span class="line">sudo ssr start</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></p><p>系统会默认启动，直接实测开机会自动运行<br>思想就是直接让系统开机启动一条sudo命令，如果这个不行的话，可以去网上参考自己linux版本的开机启动脚本或命令,然后添加一条命令就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssr start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ssr相比于ss更加稳定，推荐安装ssr&lt;br&gt;之前在网上找到很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用&lt;br&gt;安装以后可以通过ssr启动或者ssr配置命令运行ssr&lt;br&gt;使用root用户登录，运行以下命令：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.djangoz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>求二叉树的最大深度和最小深度</title>
    <link href="https://www.djangoz.com/2017/08/15/Depth_of_Binary_tree/"/>
    <id>https://www.djangoz.com/2017/08/15/Depth_of_Binary_tree/</id>
    <published>2017-08-14T16:00:00.000Z</published>
    <updated>2018-06-06T15:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>运用递归的思想实现起来简单很多。</p><h1 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left,*right;</span><br><span class="line">    TreeNode()&#123;&#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> _val):val(_val),left(<span class="literal">NULL</span>),right(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体实现二叉树就不写了。</p><h1 id="求二叉树的最大深度"><a href="#求二叉树的最大深度" class="headerlink" title="求二叉树的最大深度"></a>求二叉树的最大深度</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> <span class="number">1</span>+minDepth(root-&gt;right);</span><br><span class="line">    <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>+minDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+min(minDepth(root-&gt;left),minDepth(root-&gt;right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;运用递归的思想实现起来简单很多。&lt;/p&gt;
&lt;h1 id=&quot;二叉树的定义&quot;&gt;&lt;a href=&quot;#二叉树的定义&quot; class=&quot;headerlink&quot; title=&quot;二叉树的定义&quot;&gt;&lt;/a&gt;二叉树的定义&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="c++" scheme="https://www.djangoz.com/categories/c/"/>
    
    
      <category term="算法与数据结构" scheme="https://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>先随便写写</title>
    <link href="https://www.djangoz.com/2017/08/12/wirte_something/"/>
    <id>https://www.djangoz.com/2017/08/12/wirte_something/</id>
    <published>2017-08-11T16:00:00.000Z</published>
    <updated>2018-06-06T14:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　今天终于学会在静态网站上安装插件了(其实也不算，是直接用的别人的主题)，原来也不难，昨天弄了老半天都没弄出来<br>　　还是写一写方法吧<br>　　(⊙o⊙)…还是以后在写吧，现在还不会用markdown写文档<br>　　初学者什么都不会~~o(&gt;_&lt;)o ~~<br>　　还是直接贴我参考的地方吧(在GitHub页面上使用Jekyll插件](<a href="http://ixti.net/software/2013/01/28/using-jekyll-plugins-on-github-pages.html" target="_blank" rel="noopener">http://ixti.net/software/2013/01/28/using-jekyll-plugins-on-github-pages.html</a>)<br>　　把主题<a href="https://github.com/mmistakes/made-mistakes-jekyll" target="_blank" rel="noopener">作者的github项目主页</a>贴一下，表示感谢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　今天终于学会在静态网站上安装插件了(其实也不算，是直接用的别人的主题)，原来也不难，昨天弄了老半天都没弄出来&lt;br&gt;　　还是写一写方法吧&lt;br&gt;　　(⊙o⊙)…还是以后在写吧，现在还不会用markdown写文档&lt;br&gt;　　初学者什么都不会~~o(&amp;gt;_&amp;lt;)o 
      
    
    </summary>
    
    
      <category term="闲言碎语" scheme="https://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
</feed>
